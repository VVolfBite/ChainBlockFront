---
import Head from "../components/_head.astro";
import Footer from "../components/dashboard/_footer.astro";
import Topbar from "../components/dashboard/_topbar.astro";
import Sidenav from "../components/dashboard/_sidenav.astro";
import Scripts from "../components/_scripts.astro";

const title = "AdminLTE | Dashboard v3";
const path = "../../dist";
const mainPage = "dashboard";
const page = "index3";
---

<!doctype html>
<html lang="en">
  <!--begin::Head-->
  <head>
    <Head title={title} path={path} />

    <!-- apexcharts -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/apexcharts@3.37.1/dist/apexcharts.css"
      integrity="sha256-4MX+61mt9NVvvuPjUWdUdyfZfxSB1/Rf9WtqRHgG5S0="
      crossorigin="anonymous"
    />
  </head>

  <body class="layout-fixed sidebar-expand-lg bg-body-tertiary">
    <!--begin::App Wrapper-->
    <div class="app-wrapper">
      <Topbar path={path} />
      <Sidenav path={path} mainPage={mainPage} page={page} />
      <!--begin::App Main-->
      <main class="app-main">
        <!--begin::App Content Header-->
        <div class="app-content-header">
          <!--begin::Container-->
          <div class="container-fluid">
            <!--begin::Row-->
            <div class="row">
              <div class="col-sm-6">
                <h3 class="mb-0">块信息面板</h3>
              </div>
              <div class="col-sm-6">
                <ol class="breadcrumb float-sm-end">
                  <li class="breadcrumb-item"><a href="#">面板</a></li>
                  <li class="breadcrumb-item active" aria-current="page">
                    块信息面板
                  </li>
                </ol>
              </div>
            </div>
            <!--end::Row-->
          </div>
          <!--end::Container-->
        </div>
        <div class="app-content">
          <!--begin::Container-->
          <div class="container-fluid">
            <!--begin::Row-->
            <div class="row">
              <div class="card mb-4">
                <div class="card-header">
                  <h3 class="card-title">块信息表</h3>
                  <hr class="hr-space my-4" />
                  <div class="row">
                    <div class="card-tools col-md-10">
                      <input
                        type="text"
                        class="form-control bg-light bg-focus-white"
                        autocomplete="off"
                        spellcheck="false"
                        id="search-panel"
                        placeholder="按编号搜索"
                        maxlength="65"
                      />
                    </div>
                    <div class="card-tools col-md-2">
                      <ul
                        class="pagination pagination-sm float-end"
                        id="pagination"
                      >
                        <li class="page-item">
                          <a class="page-link" href="#">&laquo;</a>
                        </li>
                      </ul>
                    </div>
                  </div>
                  <div class="row">
                    <span class="card-tools bg-light bg-focus-white col-md-1" style="padding: 20px; display: inline-block;">
                        共计结果:
                    </span>
                    <span class="card-tools bg-light bg-focus-white col-md-11" style="padding: 20px 0px; display: inline-block;">
                      <span id="result-count" style="color: blue; font-weight: bold; padding: 10px;">0</span> 份块记录
                  </span>
                </div>
                  <hr class="hr-space my-4" />

                  <!-- /.card-header -->
                  <div class="card-body p-0">
                    <table class="table flex">
                      <thead>
                        <tr>
                          <th class="col-md-1">块编号</th>
                          <th class="col-md-1">块年龄</th>
                          <th class="col-md-1">块内事务量</th>
                          <th class="col-md-1">块当前状态</th>
                          <th class="col-md-1">块阶段计时</th>
                        </tr>
                      </thead>
                      <tbody id="blockInfoTableBody"> </tbody>
                    </table>
                  </div>
                  <!-- /.card-body -->
                  <!-- /.card -->
                  <!-- /.col-md-6 -->
                </div>
                <!--end::Row-->
              </div>
              <!--end::Container-->
            </div>
            <!--end::App Content-->
          </div>
          <div id="blockInfoPopup">
            <table>
              <tbody id="popupContent">
                <!-- 这里将显示弹出表格内容，不包含表头 -->
              </tbody>
            </table>
          </div>
          <!--end::App Main-->
          <Footer />
        </div>

        <!--end::App Wrapper-->
        <!--begin::Script-->
        <Scripts path={path} />

        <!-- OPTIONAL SCRIPTS -->

        <!-- apexcharts -->
        <script
          src="https://cdn.jsdelivr.net/npm/apexcharts@3.37.1/dist/apexcharts.min.js"
          integrity="sha256-+vh8GkaU7C9/wbSLIcwq82tQ2wTf44aOHA8HlBMwRI8="
          crossorigin="anonymous"
        >
          import { info } from "astro/dist/core/logger/core";
        </script>

        <script is:inline>
          let currentPage = 1;
          let totalblockList = [];
          function renderChart(selector, data) {
            const options = {
              series: [{ data }],
              xaxis: {
                categories: ["发布", "排队", "提交", "确认"],
              },
              chart: {
                type: "line",
                width: 150,
                height: 30,
                sparkline: {
                  enabled: true,
                },
              },
              colors: ["var(--bs-primary)"],
              stroke: {
                width: 2,
              },
              tooltip: {
                fixed: {
                  enabled: false,
                },
                x: {
                  show: true,
                },
                y: {
                  title: {
                    formatter: function (seriesName) {
                      return "计时:";
                    },
                  },
                  formatter: function (value) {
                    return value + "ms";
                  },
                },
                marker: {
                  show: false,
                },
              },
            };
            const chart = new ApexCharts(
              document.querySelector(selector),
              options,
            );
            chart.render();
          }
          function formatTimestamp(timestamp, mode) {
            const currentDate = new Date();
            const targetDate = new Date(timestamp * 1000); // Convert to milliseconds

            const yearDiff =
              currentDate.getFullYear() - targetDate.getFullYear();
            const monthDiff = currentDate.getMonth() - targetDate.getMonth();
            const dayDiff = currentDate.getDate() - targetDate.getDate();
            const hourDiff = currentDate.getHours() - targetDate.getHours();
            const minuteDiff =
              currentDate.getMinutes() - targetDate.getMinutes();
            const secondDiff =
              currentDate.getSeconds() - targetDate.getSeconds();

            if (mode === "0") {
              return `${targetDate.getFullYear()}-${(targetDate.getMonth() + 1)
                .toString()
                .padStart(2, "0")}-${targetDate
                .getDate()
                .toString()
                .padStart(2, "0")} ${targetDate
                .getHours()
                .toString()
                .padStart(2, "0")}:${targetDate
                .getMinutes()
                .toString()
                .padStart(2, "0")}:${targetDate
                .getSeconds()
                .toString()
                .padStart(2, "0")}`;
            } else if (mode === "1") {
              let result = "";

              if (yearDiff > 0) {
                result += `${yearDiff}年`;
              }
              if (monthDiff > 0) {
                result += `${monthDiff}月`;
              }
              if (dayDiff > 0) {
                result += `${dayDiff}天`;
              }
              if (hourDiff > 0) {
                result += `${hourDiff}小时`;
              }
              if (minuteDiff > 0) {
                result += `${minuteDiff}分钟`;
              }
              if (secondDiff > 0) {
                result += `${secondDiff}秒`;
              }

              return result;
            }

            return "Invalid mode";
          }
          function getStatusClassName(status) {
            switch (status) {
              case "Pending":
                return "secondary";
              case "Committed":
                return "primary";
              case "Finalized":
                return "warning";
              case "Failed":
                return "danger";
              case "Successed":
                return "success";
              default:
                // 默认情况下使用蓝色
                return "success";
            }
          }
          const searchInput = document.getElementById("search-panel");
          function searchBlocks(searchTerm, blockList) {
            const searchResults = blockList.filter((block) => {
              // 这里可以根据你的匹配逻辑来判断是否匹配
              // 例如，如果 blockNum 包含 searchTerm，则认为匹配
              return block.blockNum.toString().includes(searchTerm);
            });
            return searchResults;
          }
          searchInput.addEventListener("input", function () {
            const searchTerm = searchInput.value;
            const searchBlockList = searchBlocks(searchTerm, totalblockList);
            currentPage=1;
            updatePagination(searchBlockList);
            fillComponentsWithData(searchBlockList);
            //renderSearchResults(searchBlockList);
          });

          const pagination = document.getElementById("pagination");
          const resultCount=document.getElementById("result-count");
          function updatePagination(blockList) {
            resultCount.innerHTML=blockList.length;
            pagination.innerHTML = "";
            pagination.innerHTML += `
                  <li class="page-item">
                      <a class="page-link" href="#">&laquo;</a>
                  </li>
              `;
            const itemsPerPage = 10; // 每页显示的项目数量
            const totalItems = blockList.length; // blockList 的长度
            const totalPages = Math.ceil(totalItems / itemsPerPage); // 总页数
            const startPage = Math.max(1, currentPage - 1);
            const endPage = Math.min(currentPage + 1, totalPages);
            for (let i = startPage; i <= endPage; i++) {
              pagination.innerHTML += `
                  <li class="page-item">
                      <a class="page-link" href="#" data-page="${i}">${i}</a>
                  </li>
              `;
            }
            pagination.innerHTML += `
                  <li class="page-item">
                      <a class="page-link" href="#">&raquo;</a>
                  </li>
              `;
            // 给分页按钮添加点击事件监听器
            const pageLinks = pagination.querySelectorAll(".page-link");
            pageLinks.forEach((link) => {
              link.addEventListener("click", () => {
                if (link.dataset.page) {
                  currentPage = parseInt(link.dataset.page);
                  console.log(currentPage);
                  if (searchInput.value.trim() === "") {
                    fetchBlock();    
                  }
                  updatePagination(blockList);
                  fillComponentsWithData(blockList);
                } else if (link.textContent === "«") {
                  currentPage = Math.max(1, currentPage - 3);
                  if (searchInput.value.trim() === "") {
                    fetchBlock();
                  }
                  updatePagination(blockList);
                  fillComponentsWithData(blockList);
                } else if (link.textContent === "»") {
                  currentPage = Math.min(totalPages, currentPage + 3);
                  if (searchInput.value.trim() === "") {
                    fetchBlock();
                  }
                  updatePagination(blockList);
                  fillComponentsWithData(blockList);
                }
              });
            });
          }
          //渲染表格部分，先渲染空组件，再装填内容
          function fetchBlock() {
            fetch("http://localhost:8000/AllBlock")
              .then((response) => response.json())
              .then((data) => {
                // 将从服务器获取的数据存储在 blockList 中
                totalblockList = data;
                // 更新表格内容
                updatePagination(totalblockList);
                fillComponentsWithData(totalblockList);
              })
              .catch((error) => {
                console.error("Error fetching data:", error);
              });
          }
          function renderEmptyComponents() {
            const tbody = document.getElementById("blockInfoTableBody");
            tbody.innerHTML = "";
            // 定义需要渲染的空组件数量
            const itemsPerPage = 10;
            for (let i = 0; i < itemsPerPage; i++) {
              const row = document.createElement("tr");
              row.className = "align-middle";

              const line = document.createElement("td");
              line.colSpan = 5;
              line.style.padding = "0";

              const card = document.createElement("div");
              //可以根据状态设置颜色
              card.className = "card card-outline " + "card-success";
              //card.style.border = "1px";

              const cardHeader = document.createElement("div");
              cardHeader.className = "card-header";

              const cardHeaderContent = document.createElement("div");
              cardHeaderContent.style.display = "flex";
              cardHeaderContent.style.justifyContent = "space-between";

              const blockNum = document.createElement("b");
              blockNum.className = "card-title ";
              blockNum.style = "flex: 0 0 auto; width: 8%; font-weight: bold;";
              blockNum.textContent = "#";

              const blockAge = document.createElement("p");
              blockAge.style = "flex: 0 0 auto; width: 10%;";

              const blockTxnNum = document.createElement("p");
              blockTxnNum.className = "col-md-1";
              blockTxnNum.textContent = "0";

              const blockStatus = document.createElement("p");
              blockStatus.className = "col-md-1";

              const blockTimer = document.createElement("p");
              blockTimer.className = "col-md-1";

              const button = document.createElement("button");
              button.type = "button";
              button.className = "btn btn-tool";
              button.setAttribute("data-lte-toggle", "card-maximize");
              //button.style.color = "black";
              //button.title = "Block Number";

              const maxIcon = document.createElement("i");
              maxIcon.className = "bi bi-fullscreen";
              maxIcon.setAttribute("data-lte-icon", "maximize");

              const minIcon = document.createElement("i");
              minIcon.className = "bi bi-fullscree-exit";
              minIcon.setAttribute("data-lte-icon", "minimize");

              button.appendChild(maxIcon);
              button.appendChild(minIcon);

              const cardTools = document.createElement("div");
              cardTools.className = "card-tools";
              cardTools.appendChild(button);

              cardHeaderContent.appendChild(blockNum);
              cardHeaderContent.appendChild(blockAge);
              cardHeaderContent.appendChild(blockStatus);
              cardHeaderContent.appendChild(blockTxnNum);
              cardHeaderContent.appendChild(blockTimer);
              cardHeaderContent.appendChild(cardTools);

              cardHeader.appendChild(cardHeaderContent);

              const cardBody = document.createElement("div");
              cardBody.className = "card-body card-hidden";

              card.appendChild(cardHeader);
              card.appendChild(cardBody);
              line.appendChild(card);
              row.appendChild(line);
              tbody.appendChild(row);

              button.addEventListener("click", function () {
                if (card) {
                  if (card.classList.contains("card-outline")) {
                    card.classList.remove("card-outline");
                    blockNum.style.display = "none";
                    blockAge.style.display = "none";
                    blockStatus.style.display = "none";
                    blockTxnNum.style.display = "none";
                    blockTimer.style.display = "none";
                  } else {
                    card.classList.add("card-outline");
                    blockNum.style.display = "block";
                    blockAge.style.display = "none";
                    blockStatus.style.display = "block";
                    blockTxnNum.style.display = "block";
                    blockTimer.style.display = "block";
                  }
                }
                if (cardBody) {
                  if (cardBody.classList.contains("card-hidden")) {
                    cardBody.style.display = "block"; // 最大化时显示 card-body
                    cardBody.classList.remove("card-hidden");
                  } else {
                    cardBody.style.display = "none"; // 最小化时隐藏 card-body
                    cardBody.classList.add("card-hidden");
                  }
                }
              });
            }
          }
          function createBlockCardBodyElement(block) {
            const blockCardBodyElement = document.createElement("div");
            blockCardBodyElement.className = "blockCardBodyElement";
            //header部分
            const cardHeaderElement = document.createElement("div");
            cardHeaderElement.className =
              "card-header d-flex justify-content-between align-items-center p-0";

            const ulElement = document.createElement("ul");
            ulElement.className = "nav nav-tabs";
            ulElement.id = "nav_tabs";
            ulElement.setAttribute("role", "tablist");
            const liElement = document.createElement("li");
            liElement.className = "nav-item";
            const aElement = document.createElement("a");
            aElement.className = "nav-link active";
            aElement.href = "#overview";
            aElement.setAttribute("data-toggle", "tab");
            aElement.textContent = "块详细信息";
            liElement.appendChild(aElement);
            ulElement.appendChild(liElement);

            cardHeaderElement.appendChild(ulElement);
            //header部分

            //tab部分
            const tabContentElement = document.createElement("div");
            tabContentElement.className = "tab-content";

            const tabPaneElement = document.createElement("div");
            tabPaneElement.className = "tab-pane fade active show";
            tabPaneElement.id = "overview";
            tabPaneElement.setAttribute("role", "tabpanel");
            tabPaneElement.setAttribute("aria-labelledby", "home-tab");

            const cardBodyElement = document.createElement("div");
            cardBodyElement.className = "card-body";

            //展示内容
            const blockInfo = [
              { label: "块编号:", value: block.blockNum, mode: "Num" },
              { label: "块高度:", value: block.blockHeight, mode: "" },
              { label: "块状态:", value: block.blockStatus, mode: "Status" },
              {
                label: "块各阶段计时:",
                value: block.blockTimer,
                mode: "Timer",
              },
              { label: "块哈希值:", value: block.blockHash, mode: "" },
              { label: "块父哈希值:", value: block.blockParentHash, mode: "" },
              { label: "块年龄:", value: block.blockAge, mode: "TimeStamp" },
            ];
            blockInfo.forEach((info) => {
              const row = document.createElement("div");
              row.className = "row align-items-center";

              const labelCol = document.createElement("div");
              labelCol.className = "col-md-3 mb-1 mb-md-0e";
              labelCol.textContent = info.label;

              const valueCol = document.createElement("div");
              valueCol.className = "col-md-9";
              if (info.mode == "") valueCol.textContent = info.value;
              else if (info.mode == "Num") {
                valueCol.style.fontWeight = "bold";
                valueCol.textContent = "#" + "\t\t" + info.value;
              } else if (info.mode == "Status") {
                const statusBadge = document.createElement("span");
                statusBadge.textContent = info.value;
                statusBadge.className =
                  "badge text-bg-" + getStatusClassName(info.value);
                valueCol.appendChild(statusBadge);
              } else if (info.mode == "Timer") {
                valueCol.textContent =
                  "发布:" +
                  info.value[0] +
                  "ms" +
                  "\t\t\t" +
                  "排队:" +
                  info.value[1] +
                  "ms" +
                  "\t\t\t" +
                  "提交:" +
                  info.value[2] +
                  "ms" +
                  "\t\t\t" +
                  "确认:" +
                  info.value[3] +
                  "ms";
              }
              else if(info.mode=="TimeStamp")
              {
                valueCol.textContent = formatTimestamp(info.value,"0");
              }

              const hr = document.createElement("hr");
              hr.className = "hr-space";

              row.appendChild(labelCol);
              row.appendChild(valueCol);

              cardBodyElement.appendChild(row);
              cardBodyElement.appendChild(hr);
            });

            //展示详细内容
            const blockDetailInfo = [
              { label: "事务列表", value: block.blockTxnList, mode: "TxnList" },
              { label: "额外信息", value: block.blockInfo, mode: "" },
            ];
            blockDetailInfo.forEach((detail) => {
              const row = document.createElement("div");
              row.className = "row align-items-center";
              const labelCol = document.createElement("div");
              labelCol.className = "col-md-3 mb-1 mb-md-0e";
              labelCol.textContent = detail.label;
              const valueCol = document.createElement("div");
              valueCol.className = "col-md-9";
              const textarea = document.createElement("textarea");
              textarea.readOnly = true;
              textarea.spellcheck = false;
              textarea.className = "form-control";
              textarea.rows = 5;
              if (detail.mode == "") textarea.textContent = detail.value;
              else if (detail.mode == "TxnList") {
                textarea.style.fontWeight = "bold";
                detail.value.forEach((txn) => {
                  textarea.textContent =
                    textarea.textContent + "#" + txn.txnNum + "\t\t";
                });
              }
              valueCol.appendChild(textarea);
              row.appendChild(labelCol);
              row.appendChild(valueCol);

              const hr = document.createElement("hr");
              hr.className = "hr-space";

              cardBodyElement.appendChild(row);
              cardBodyElement.appendChild(hr);
            });
            blockCardBodyElement.appendChild(cardHeaderElement);
            tabPaneElement.appendChild(cardBodyElement);
            tabContentElement.appendChild(tabPaneElement);
            blockCardBodyElement.appendChild(tabContentElement);
            return blockCardBodyElement;
          }
          function fillComponentsWithData(blockList) {
            const itemsPerPage = 10;
            const tbody = document.getElementById("blockInfoTableBody");

            // 计算要显示的数据范围
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;

            for (let i = 0; i < itemsPerPage; i++) {
              const card = tbody.children[i];
              card.style.display = "none";
              const dataIndex = startIndex + i;

              if (dataIndex < blockList.length) {
                const block = blockList[dataIndex];
                card.className =
                  "card card-outline " +
                  "card-" +
                  getStatusClassName(block.blockStatus);
                const cardChildren = card.querySelectorAll(".card");
                cardChildren.forEach((childElement) => {
                  childElement.className = card.className;
                });
                const blockNum = card.querySelector(".card-title");
                const blockAge = card.querySelector(
                  ".card-header p:nth-child(2)",
                );
                const blockTxnNum = card.querySelector(
                  ".card-header p:nth-child(3)",
                );
                const blockStatus = card.querySelector(
                  ".card-header p:nth-child(4)",
                );
                const blockTimer = card.querySelector(
                  ".card-header p:nth-child(5)",
                );
                const cardBody = card.querySelector(".card-body");
                
                blockNum.textContent = `#${block.blockNum}`;
                blockAge.textContent = `${formatTimestamp(block.blockAge,"0")}`;
                blockTxnNum.textContent = `${block.blockTxnNum}`;
                blockStatus.innerHTML = "";
                blockStatus.textContent = `${block.blockStatus}`;
                blockStatus.className =
                  "badge text-bg-" + getStatusClassName(block.blockStatus);
                blockTimer.innerHTML = "";
                const sparklineDiv = document.createElement("div");
                sparklineDiv.id = "table-sparkline-" + block.blockNum;
                blockTimer.appendChild(sparklineDiv);
                renderChart("#" + sparklineDiv.id, block.blockTimer);
                const cardBodyElement = createBlockCardBodyElement(block);

                cardBody.innerHTML = "";
                cardBody.appendChild(cardBodyElement);
                card.style.display = "table-row";
                cardBody.style.display = "none";
              } else {
                card.style.display = "none";
              }
            }
          }
          renderEmptyComponents();
          fetchBlock();
          // 初始页面加载时调用一次 fetchBlock，更新表格内容
        </script>
        <!--end::Script-->
      </main><!--end::Body-->
    </div>
  </body>
</html>
