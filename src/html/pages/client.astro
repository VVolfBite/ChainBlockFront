---
import Head from "../components/_head.astro";
import Footer from "../components/dashboard/_footer.astro";
import Topbar from "../components/dashboard/_topbar.astro";
import Sidenav from "../components/dashboard/_sidenav.astro";
import Scripts from "../components/_scripts.astro";

const title = "AdminLTE v4 | Dashboard";
const path = "../../dist";
const mainPage = "dashboard";
const page = "index";
---

<!doctype html>
<html lang="en">
  <head>
    <Head title={title} path={path} />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/apexcharts@3.37.1/dist/apexcharts.css"
      integrity="sha256-4MX+61mt9NVvvuPjUWdUdyfZfxSB1/Rf9WtqRHgG5S0="
      crossorigin="anonymous"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/jsvectormap@1.5.3/dist/css/jsvectormap.min.css"
      integrity="sha256-+uGLJmmTKOqBr+2E6KDYs/NRsHxSkONXFHUL0fy2O/4="
      crossorigin="anonymous"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/apexcharts@3.37.1/dist/apexcharts.css"
      integrity="sha256-4MX+61mt9NVvvuPjUWdUdyfZfxSB1/Rf9WtqRHgG5S0="
      crossorigin="anonymous"
    />
  </head>
  <body class="layout-fixed sidebar-expand-lg bg-body-tertiary">
    <div class="app-wrapper">
      <Topbar path={path} />
      <Sidenav path={path} mainPage={mainPage} page={page} />
      <main class="app-main">
        <div class="app-content-header">
          <div class="container-fluid">
            <div class="row">
              <div class="col-sm-6">
                <h3 class="mb-0">客户面板</h3>
              </div>
              <div class="col-sm-6">
                <ol class="breadcrumb float-sm-end">
                  <li class="breadcrumb-item"><a href="#">客户面板</a></li>
                  <li class="breadcrumb-item active" aria-current="page">
                    面板
                  </li>
                </ol>
              </div>
            </div>
            <div class="row">
              <!-- 客户信息 -->
              <div class="col-12">
                <div
                  class="info-box"
                  style="padding: 1rem; margin-top: 2rem; margin-bottom: 1rem;"
                >
                  <span class="info-box-icon">
                    <i class="bi bi-person-lines-fill"></i>
                  </span>
                  <div class="col-4">
                    <div class="info-box-content">
                      <strong class="info-box-text">
                        用户名:<input
                          id="clientName"
                          type="text"
                          required
                          pattern="[A-Za-z0-9]{1,50}"
                          style=" font-weight: bold; width: 420px; background: transparent; border: none; outline: none; padding-left: 10px; padding-right: 10px;"
                          placeholder="若希望注册新用户,请输入新用户名"
                        />
                      </strong>
                      <strong class="info-box-text">
                        用户地址:<input
                          id="clientAddress"
                          type="text"
                          required
                          pattern="[A-Za-z0-9]{1,50}"
                          style=" font-weight: bold; width: 420px; background: transparent; border: none; outline: none; padding-left: 10px; padding-right: 10px;"
                          placeholder="输入客户地址,若地址不存在,则连同用户名注册新用户"
                        />
                      </strong>
                      <hr />
                      <div class="info-box-number">
                        提交Nonce数: <strong>
                          <span
                            id="CommitedNonce"
                            style="padding-left: 10px; padding-right: 10px;"
                          ></span></strong
                        >
                      </div>
                      <div class="info-box-number">
                        验证Nonce数: <strong
                          ><span
                            id="VerifiedNonce"
                            style="padding-left: 10px; padding-right: 10px;"
                          ></span></strong
                        >
                      </div>
                    </div>
                  </div>
                  <hr
                    style="border-left: 1px solid #000; height: full; margin: 0 10px;"
                  />
                  <span class="info-box-icon">
                    <i class="bi bi-wallet2"></i>
                  </span>
                  <div class="info-box-content">
                    <strong>
                      <table>
                        <thead>
                          <tr>
                            <th class="col-md-1">资产</th>
                            <th class="col-md-1">余额</th>
                          </tr>
                        </thead>
                        <tbody id="assetsList"></tbody>
                      </table>
                    </strong>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="app-content">
          <div class="container-fluid">
            <div class="row">
              <!-- 本地提交事务 -->
              <div class="col-md-7">
                <div class="card">
                  <div class="card-header">
                    <h3 class="card-title"><strong>该客户提交事务</strong></h3>
                    <div class="card-tools">
                      <button
                        type="button"
                        class="btn btn-tool"
                        data-lte-toggle="card-collapse"
                      >
                        <i data-lte-icon="expand" class="bi bi-plus-lg"></i>
                        <i data-lte-icon="collapse" class="bi bi-dash-lg"></i>
                      </button>
                    </div>
                  </div>
                  <div class="card-body p-0">
                    <div class="table-responsive">
                      <table class="table m-0">
                        <thead>
                          <tr>
                            <th style="flex: 0 0 auto; width: 10%;">编号</th>
                            <th style="flex: 0 0 auto; width: 8%;">操作</th>
                            <th style="flex: 0 0 auto; width: 8%;">数值</th>
                            <th style="flex: 0 0 auto; width: 20%;">来自</th>
                            <th style="flex: 0 0 auto; width: 20%;">发往</th>
                            <th style="flex: 0 0 auto; width: 10%;">状态</th>
                            <th style="flex: 0 0 auto; width: 4%;"></th>
                          </tr>
                        </thead>
                        <tbody id="clientTxnTable"> </tbody>
                      </table>
                    </div>
                    <!-- /.table-responsive -->
                  </div>
                  <!-- /.card-body -->
                  <div class="card-footer clearfix">
                    <a
                      href="javascript:void(0)"
                      class="btn btn-sm btn-primary float-start"
                    >
                      添加新的事务
                    </a>
                    <a
                      href="javascript:void(0)"
                      class="btn btn-sm btn-secondary float-end"
                    >
                      查看所有事务
                    </a>
                  </div>
                  <!-- /.card-footer -->
                </div>
                <!-- /.card -->
              </div>

              <div class="card mb-4 col-md-5">
                <div class="card-header">
                  <ul class="nav nav-tabs">
                    <li class="nav-item">
                      <button
                        class="nav-link active"
                        id="singleTxn-tab"
                        data-bs-toggle="tab"
                        data-bs-target="#singleTxn"
                        type="button"
                        aria-selected="true">单次事务提交</button
                      >
                    </li>
                    <li class="nav-item">
                      <button
                        class="nav-link"
                        id="multiTxn-tab"
                        data-bs-toggle="tab"
                        data-bs-target="#multiTxn"
                        type="button"
                        aria-selected="false">批量事务提交</button
                      >
                    </li>
                  </ul>
                  <div class="card-tools">
                    <button
                      type="button"
                      class="btn btn-tool"
                      data-lte-toggle="card-collapse"
                    >
                      <i data-lte-icon="expand" class="bi bi-plus-lg"></i>
                      <i data-lte-icon="collapse" class="bi bi-dash-lg"></i>
                    </button>
                  </div>
                </div>
                <div class="tab-content">
                  <div
                    class="tab-pane fade show active"
                    id="singleTxn"
                    role="tabpanel"
                    aria-labelledby="singleTxn-tab"
                  >
                    <form class="needs-validation" id="form" novalidate>
                      <div class="card-body">
                        <div class="row g-3">
                          <div class="col-md-12">
                            <label for="validationTxnNum" class="form-label"
                              >事务编号:</label
                            >
                            <input
                              type="text"
                              class="form-control"
                              id="validationTxnNum"
                              required
                              pattern="[A-Za-z0-9]{1,50}"
                            />
                            <div class="valid-feedback">格式正确。</div>
                            <div class="invalid-feedback">
                              事务编号只能由大小写字母和数字构成，且长度不能超过50个字节。
                            </div>
                          </div>

                          <div class="col-md-6">
                            <label class="form-label">事务时间戳:</label>
                            <input
                              type="text"
                              class="form-control"
                              id="validationTimestamp"
                              required
                              disabled
                            />
                          </div>
                          <div class="col-md-6">
                            <label class="form-label">事务Nonce号:</label>
                            <input
                              type="text"
                              class="form-control"
                              id="validationNonce"
                              required
                              disabled
                            />
                          </div>
                          <hr />
                          <div class="col-md-6">
                            <label for="validationFrom" class="form-label"
                              >事务来自:</label
                            >
                            <div class="input-group has-validation">
                              <span
                                class="input-group-text"
                                id="inputGroupPrepend">用户</span
                              >
                              <input
                                type="text"
                                class="form-control"
                                id="validationFrom"
                                aria-describedby="inputGroupPrepend"
                                required
                                pattern="[A-Za-z0-9_]+"
                              />
                              <div class="valid-feedback">格式正确。</div>
                              <div class="invalid-feedback">
                                用户名只能包含大小写字母、数字和下划线。
                              </div>
                            </div>
                          </div>

                          <div class="col-md-6">
                            <label for="validationTo" class="form-label"
                              >事务发往:</label
                            >
                            <div class="input-group has-validation">
                              <span
                                class="input-group-text"
                                id="inputGroupPrepend">用户</span
                              >
                              <input
                                type="text"
                                class="form-control"
                                id="validationTo"
                                aria-describedby="inputGroupPrepend"
                                required
                                pattern="[A-Za-z0-9_]+"
                              />
                              <div class="valid-feedback">格式正确。</div>
                              <div class="invalid-feedback">
                                用户名只能包含大小写字母、数字和下划线。
                              </div>
                            </div>
                          </div>

                          <div class="col-md-6">
                            <label for="validationOperation" class="form-label"
                              >事务操作:</label
                            >
                            <div class="input-group has-validation">
                              <span
                                class="input-group-text"
                                id="inputGroupPrepend">Op-</span
                              >
                              <input
                                type="text"
                                class="form-control"
                                id="validationOperation"
                                aria-describedby="inputGroupPrepend"
                                required
                                pattern="[A-Za-z0-9_]+"
                              />
                              <div class="valid-feedback">格式正确。</div>
                              <div class="invalid-feedback">
                                合法操作由大小写字母、数字和下划线。
                              </div>
                            </div>
                          </div>

                          <div class="col-md-6">
                            <label for="validationAmount" class="form-label"
                              >事务数值:</label
                            >
                            <div class="input-group has-validation">
                              <span
                                class="input-group-text"
                                id="inputGroupPrepend">$</span
                              >
                              <input
                                type="text"
                                class="form-control"
                                id="validationAmount"
                                aria-describedby="inputGroupPrepend"
                                required
                                pattern="^([1-9][0-9]*|0)(\.[0-9]+)?$"
                              />
                              <div class="valid-feedback">格式正确。</div>
                              <div class="invalid-feedback">
                                请输入合法的数字。
                              </div>
                            </div>
                          </div>

                          <div class="col-md-12">
                            <label for="validationData" class="form-label"
                              >事务数据:</label
                            >
                            <div class="input-group has-validation">
                              <textarea
                                class="form-control"
                                id="validationData"
                                aria-describedby="inputGroupPrepend"
                                rows="5"></textarea>
                              <div class="valid-feedback">格式正确。</div>
                              <div class="invalid-feedback">请输入内容。</div>
                            </div>
                          </div>

                          <div class="col-md-12">
                            <label for="validationInfo" class="form-label"
                              >事务附加信息:</label
                            >
                            <div class="input-group has-validation">
                              <textarea
                                class="form-control"
                                id="validationInfo"
                                aria-describedby="inputGroupPrepend"
                                rows="5"></textarea>
                              <div class="valid-feedback">格式正确。</div>
                              <div class="invalid-feedback">请输入内容。</div>
                            </div>
                          </div>

                          <hr />

                          <div class="col-md-12">
                            <label for="validationNode" class="form-label"
                              >发送节点:</label
                            >
                            <select
                              class="form-select"
                              id="validationNode"
                              required
                            >
                            </select>
                            <div class="valid-feedback">选择合法。</div>
                            <div class="invalid-feedback">
                              必须选择一种节点。
                            </div>
                          </div>
                        </div>
                        <!--end::Row-->
                      </div>
                      <!--end::Body-->
                      <!--begin::Footer-->
                      <div class="card-footer">
                        <button
                          type="reset"
                          class="btn btn-secondary col-md-2"
                          style="background-color: gray;"
                        >
                          重置
                        </button>
                        <button
                          type="submit"
                          class="btn btn-success col-md-2 float-end"
                          id="submitForm"
                        >
                          提交
                        </button>
                      </div>
                      <!--end::Footer-->
                    </form>
                  </div>
                  <div
                    class="tab-pane fade"
                    id="multiTxn"
                    role="tabpanel"
                    aria-labelledby="multiTxn-tab"
                  >
                    <form class="needs-validation" id="formM" novalidate>
                      <div class="card-body">
                        <div class="row g-3">
                          <div class="col-md-6">
                            <label for="validationTxnNumM" class="form-label"
                              >事务生成数量:</label
                            >
                            <input
                              type="text"
                              class="form-control"
                              id="validationTxnNumM"
                              required
                              pattern="^([1-9][0-9]*|0)(\.[0-9]+)?$"
                            />
                            <div class="valid-feedback">格式正确。</div>
                            <div class="invalid-feedback">请输入合法数字。</div>
                          </div>
                          <div class="col-md-6">
                            <label class="form-label">事务时间戳:</label>
                            <input
                              type="text"
                              class="form-control"
                              id="validationTimestampM"
                              required
                              disabled
                            />
                          </div>
                          <div class="col-md-6">
                            <label class="form-label">事务Nonce号 从:</label>
                            <input
                              type="text"
                              class="form-control"
                              id="validationNonceFrom"
                              required
                              disabled
                            />
                          </div>
                          <div class="col-md-6">
                            <label class="form-label">事务Nonce号 至:</label>
                            <input
                              type="text"
                              class="form-control"
                              id="validationNonceTo"
                              required
                              disabled
                            />
                          </div>
                          <hr />
                          <div class="col-md-12">
                            <label for="validationFromM" class="form-label"
                              >事务来自:</label
                            >
                            <div class="input-group has-validation">
                              <span
                                class="input-group-text"
                                id="inputGroupPrependM">用户</span
                              >
                              <input
                                type="text"
                                class="form-control"
                                id="validationFromM"
                                aria-describedby="inputGroupPrepend"
                                required
                                pattern="[A-Za-z0-9_]+(;[A-Za-z0-9_]+)*"
                              />
                              <div class="valid-feedback">格式正确。</div>
                              <div class="invalid-feedback">
                                用户名只能包含大小写字母、数字和下划线，多个用户名用分号隔开并紧跟在分号后。
                              </div>
                            </div>
                          </div>

                          <div class="col-md-12">
                            <label for="validationToM" class="form-label"
                              >事务发往:</label
                            >
                            <div class="input-group has-validation">
                              <span
                                class="input-group-text"
                                id="inputGroupPrependM">用户</span
                              >
                              <input
                                type="text"
                                class="form-control"
                                id="validationToM"
                                aria-describedby="inputGroupPrepend"
                                required
                                pattern="[A-Za-z0-9_]+(;[A-Za-z0-9_]+)*"
                              />
                              <div class="valid-feedback">格式正确。</div>
                              <div class="invalid-feedback">
                                用户名只能包含大小写字母、数字和下划线，多个用户名用分号隔开并紧跟在分号后。
                              </div>
                            </div>
                          </div>

                          <div class="col-md-12">
                            <label for="validationOperationM" class="form-label"
                              >事务操作:</label
                            >
                            <div class="input-group has-validation">
                              <span
                                class="input-group-text"
                                id="inputGroupPrependM">Op-</span
                              >
                              <input
                                type="text"
                                class="form-control"
                                id="validationOperationM"
                                aria-describedby="inputGroupPrepend"
                                required
                                pattern="[A-Za-z0-9_]+(;[A-Za-z0-9_]+)*"
                              />
                              <div class="valid-feedback">格式正确。</div>
                              <div class="invalid-feedback">
                                合法操作由大小写字母、数字和下划线,多个操作用分号隔开并紧跟在分号后。
                              </div>
                            </div>
                          </div>

                          <div class="col-md-6">
                            <label for="validationAmountMinM" class="form-label"
                              >事务数值下限:</label
                            >
                            <div class="input-group has-validation">
                              <span
                                class="input-group-text"
                                id="inputGroupPrependM">$</span
                              >
                              <input
                                type="text"
                                class="form-control"
                                id="validationAmountMinM"
                                aria-describedby="inputGroupPrepend"
                                required
                                pattern="^([1-9][0-9]*|0)(\.[0-9]+)?$"
                              />
                              <div class="valid-feedback">格式正确。</div>
                              <div class="invalid-feedback">
                                请输入合法的数字。
                              </div>
                            </div>
                          </div>
                          <div class="col-md-6">
                            <label for="validationAmountMaxM" class="form-label"
                              >事务数值上限:</label
                            >
                            <div class="input-group has-validation">
                              <span
                                class="input-group-text"
                                id="inputGroupPrependM">$</span
                              >
                              <input
                                type="text"
                                class="form-control"
                                id="validationAmountMaxM"
                                aria-describedby="inputGroupPrepend"
                                required
                                pattern="^([1-9][0-9]*|0)(\.[0-9]+)?$"
                              />
                              <div class="valid-feedback">格式正确。</div>
                              <div class="invalid-feedback">
                                请输入合法的数字。
                              </div>
                            </div>
                          </div>
                          <div class="col-md-12">
                            <label for="validationDataM" class="form-label"
                              >事务数据:</label
                            >
                            <div class="input-group has-validation">
                              <textarea
                                class="form-control"
                                id="validationData"
                                aria-describedby="inputGroupPrepend"
                                rows="5"></textarea>
                              <div class="valid-feedback">格式正确。</div>
                              <div class="invalid-feedback">请输入内容。</div>
                            </div>
                          </div>

                          <div class="col-md-12">
                            <label for="validationInfoM" class="form-label"
                              >事务附加信息:</label
                            >
                            <div class="input-group has-validation">
                              <textarea
                                class="form-control"
                                id="validationInfo"
                                aria-describedby="inputGroupPrepend"
                                rows="5"></textarea>
                              <div class="valid-feedback">格式正确。</div>
                              <div class="invalid-feedback">请输入内容。</div>
                            </div>
                          </div>
                          <hr />
                          <div class="col-md-12">
                            <label for="validationNodeM" class="form-label"
                              >发送节点:</label
                            >
                            <select
                              class="form-select"
                              id="validationNodeM"
                              required
                            >
                            </select>
                            <div class="valid-feedback">选择合法。</div>
                            <div class="invalid-feedback">
                              必须选择一种节点。
                            </div>
                          </div>
                        </div>
                        <!--end::Row-->
                      </div>
                      <!--end::Body-->
                      <!--begin::Footer-->
                      <div class="card-footer">
                        <button
                          type="reset"
                          class="btn btn-secondary col-md-2"
                          style="background-color: gray;"
                        >
                          重置
                        </button>
                        <button
                          type="submit"
                          class="btn btn-warning col-md-2 float-end"
                          id="submitFormM"
                        >
                          提交
                        </button>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
      <script is:inline>
        //客户面板
        function fillClientCompomentsWithData(clientData) {
          //console.log(clientData);
          const clientNameElement = document.getElementById("clientName");
          if (clientNameElement) {
            clientNameElement.value = clientData.clientName;
          }
          const commitedNonceElement = document.getElementById("CommitedNonce");
          if (commitedNonceElement) {
            commitedNonceElement.textContent = clientData.clientCommitedNonce;
          }
          const verifiedNonceElement = document.getElementById("VerifiedNonce");
          if (verifiedNonceElement) {
            verifiedNonceElement.textContent = clientData.clientVerifiedNonce;
          }
          const nonceInput = document.getElementById("validationNonce");
          if (nonceInput) {
            nonceInput.value = clientData.clientCommitedNonce + 1;
          }
          const nonceFromInput = document.getElementById("validationNonceFrom");
          if (nonceFromInput) {
            nonceFromInput.value = clientData.clientCommitedNonce + 1;
          }
          const nonceToInput = document.getElementById("validationNonceTo");
          if (nonceToInput) {
            nonceToInput.value = clientData.clientCommitedNonce + 1;
          }
          const assetsListContainer = document.getElementById("assetsList");

          if (assetsListContainer) {
            assetsListContainer.innerHTML = "";
            const hrline = document.createElement("tr");
            const hrCell1 = document.createElement("td");
            hrCell1.innerHTML = "<hr/>";
            const hrCell2 = document.createElement("td");
            hrCell2.innerHTML = "<hr/>";
            hrline.appendChild(hrCell1);
            hrline.appendChild(hrCell2);
            assetsListContainer.appendChild(hrline);

            for (const asset of clientData.clientAssetList) {
              const assetName = asset[0];
              const assetAmount = asset[1];

              const row = document.createElement("tr");

              const assetNameCell = document.createElement("td");
              assetNameCell.textContent = assetName;

              const assetAmountCell = document.createElement("td");
              assetAmountCell.textContent = assetAmount;

              row.appendChild(assetNameCell);
              row.appendChild(assetAmountCell);

              assetsListContainer.appendChild(row);
            }
          }
        }
        function fetchClient(clientAddress, clientName) {
          const formData = new FormData();
          formData.append("clientName", clientName);
          formData.append("clientAddress", clientAddress);
          const requestOptions = {
            method: "POST",
            body: formData,
          };
          fetch("http://localhost:8000/GetClient", requestOptions)
            .then((response) => {
              if (response.ok) {
                return response.json();
              } else {
                throw new Error("Failed to fetch client data");
              }
            })
            .then((data) => {
              fillClientCompomentsWithData(data);
              console.log("Client data:", data);
            })
            .catch((error) => {
              console.error("Error:", error);
            });
        }
        const clientAddressInput = document.getElementById("clientAddress");
        const clientNameInput = document.getElementById("clientName");
        clientAddressInput?.addEventListener("keyup", function (event) {
          if (event.key === "Enter") {
            fetchClient(clientAddressInput.value, clientNameInput.value);
          }
        });
      </script>
      <script
        src="https://cdn.jsdelivr.net/npm/apexcharts@3.37.1/dist/apexcharts.min.js"
        integrity="sha256-+vh8GkaU7C9/wbSLIcwq82tQ2wTf44aOHA8HlBMwRI8="
        crossorigin="anonymous"></script>
      <script is:inline>
        function renderChart(selector, data) {
          const options = {
            series: [{ data }],
            xaxis: {
              categories: ["发布", "排队", "提交", "确认"],
            },
            chart: {
              type: "line",
              width: 150,
              height: 30,
              sparkline: {
                enabled: true,
              },
            },
            colors: ["var(--bs-primary)"],
            stroke: {
              width: 2,
            },
            tooltip: {
              fixed: {
                enabled: false,
              },
              x: {
                show: true,
              },
              y: {
                title: {
                  formatter: function (seriesName) {
                    return "计时:";
                  },
                },
                formatter: function (value) {
                  return value + "ms";
                },
              },
              marker: {
                show: false,
              },
            },
          };

          const chart = new ApexCharts(
            document.querySelector(selector),
            options,
          );
          chart.render();
        }
        function getStatusBadgeClassName(status) {
          switch (status) {
            case "Pending":
              return "badge text-bg-secondary";
            case "Committed":
              return "badge text-bg-primary";
            case "Finalized":
              return "badge text-bg-warning";
            case "Failed":
              return "badge text-bg-danger";
            case "Successed":
              return "badge text-bg-success";
            default:
              // 默认情况下使用蓝色
              return "badge text-bg-success";
          }
        }
        function requestTxnInfoByClient() {
          fetch("http://localhost:8000/LatestTxn")
            .then((response) => {
              if (response.ok) {
                return response.json();
              } else {
                throw new Error("Failed to fetch data");
              }
            })
            .then((data) => {
              // 获取父元素，用于添加生成的标签
              const parentElement = document.getElementById("clientTxnTable");
              const txnList = data;
              parentElement.innerHTML = "";
              //console.log(txnList);

              // 遍历块数据并生成标签
              txnList.forEach((txn) => {
                // 创建一个新表格行
                //console.log(txn);
                const newRow = document.createElement("tr");
                // 创建表格单元格并填充数据
                const cell1 = document.createElement("td");
                const txnNum = document.createElement("b");
                txnNum.textContent = "#" + txn.txnNum;
                cell1.appendChild(txnNum);

                const cell2 = document.createElement("td");
                cell2.textContent = txn.txnOperation;

                const cell3 = document.createElement("td");
                cell3.textContent = txn.txnValue;

                const cell4 = document.createElement("td");
                cell4.textContent = txn.txnFrom;

                const cell5 = document.createElement("td");
                cell5.textContent = txn.txnTo;

                const cell6 = document.createElement("td");
                const statusBadge = document.createElement("span");
                statusBadge.textContent = txn.txnStatus;
                statusBadge.className = getStatusBadgeClassName(txn.txnStatus);
                cell6.appendChild(statusBadge);

                const button = document.createElement("button");
                button.type = "button";
                button.className = "btn btn-tool col-md-1";
                button.setAttribute("data-lte-toggle", "card-maximize");
                //button.style.color = "black";
                //button.title = "Txn Number";

                const maxIcon = document.createElement("i");
                maxIcon.className = "bi bi-fullscreen";
                maxIcon.setAttribute("data-lte-icon", "maximize");

                const minIcon = document.createElement("i");
                minIcon.className = "bi bi-fullscree-exit";
                minIcon.setAttribute("data-lte-icon", "minimize");

                button.appendChild(maxIcon);
                button.appendChild(minIcon);

                // 将单元格添加到表格行
                newRow.appendChild(cell1);
                newRow.appendChild(cell2);
                newRow.appendChild(cell3);
                newRow.appendChild(cell4);
                newRow.appendChild(cell5);
                newRow.appendChild(cell6);
                // 将新行添加到父元素中
                parentElement.appendChild(newRow);
              });
            })
            .catch((error) => {
              console.error("Error:", error);
            });
        }
        setInterval(requestTxnInfoByClient, 5000);
      </script>
      <script is:inline>
        const validationNode = document.getElementById("validationNode");
        const form = document.getElementById("form");

        function fetchNodeList() {
          fetch("http://localhost:8000/AllNode")
            .then((response) => response.json())
            .then((data) => {
              validationNode.innerHTML = "";
              validationNode.options[0] = new Option("广播", "Broadcast");
              data.forEach(function (node, index) {
                validationNode.options[index + 1] = new Option(
                  node.nodeName,
                  node.nodeName,
                );
              });
            })
            .catch((error) => console.error("请求出错: " + error));
        }
        form.addEventListener("submit", function (event) {
          if (!form.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
          }
          form.classList.add("was-validated");
        });

        fetchNodeList();
        setInterval(fetchNodeList, 5000);

        const timestampInput = document.getElementById("validationTimestamp");

        function updateTimestamp() {
          const currentTimestamp = Math.floor(Date.now() / 1000);
          timestampInput.value = currentTimestamp;
        }

        updateTimestamp();
        setInterval(updateTimestamp, 1000);

        document
          .getElementById("submitForm")
          .addEventListener("click", function () {
            const txnNum = document.getElementById("validationTxnNum").value;
            console.log(txnNum);
            const txnFrom = document.getElementById("validationFrom").value;
            const txnTo = document.getElementById("validationTo").value;
            const txnOperation = document.getElementById(
              "validationOperation",
            ).value;
            const txnAmount = document.getElementById("validationAmount").value;
            const txnData = document.getElementById("validationData").value;
            const txnInfo = document.getElementById("validationInfo").value;
            const selectedNode = validationNode.value;

            const formData = new FormData();
            formData.append("txnNum", txnNum);
            formData.append("txnFrom", txnFrom);
            formData.append("txnTo", txnTo);
            formData.append("txnOperation", txnOperation);
            formData.append("txnValue", txnAmount);
            formData.append("txnData", txnData);
            formData.append("txnInfo", txnInfo);
            formData.append("txnNode", selectedNode);
            //console.log(formData);

            fetch("http://localhost:8000/SubmitTxn", {
              method: "POST",
              body: formData,
            })
              .then((response) => {
                if (response.ok) {
                  console.log("第一个表单提交成功！");
                } else {
                  console.error("第一个表单提交失败");
                }
              })
              .catch((error) => console.error("请求出错: " + error));
          });
      </script>
      <script is:inline>
        const validationNodeM = document.getElementById("validationNodeM");
        function fetchNodeList() {
          fetch("http://localhost:8000/AllNode")
            .then((response) => response.json())
            .then((data) => {
              validationNodeM.innerHTML = "";
              validationNodeM.options[0] = new Option("广播", "Broadcast");
              data.forEach(function (node, index) {
                validationNodeM.options[index + 1] = new Option(
                  node.nodeName,
                  node.nodeName,
                );
              });
            })
            .catch((error) => console.error("请求出错: " + error));
        }

        document
          .getElementById("validationTxnNumM")
          .addEventListener("input", updateNonceValues);

        function updateNonceValues() {
          var txnNumInput = document.getElementById("validationTxnNumM");
          var txnNumValue = parseInt(txnNumInput.value);

          if (!isNaN(txnNumValue) && txnNumValue > 0) {
            var nonceFromInput = document.getElementById("validationNonceFrom");
            var nonceToInput = document.getElementById("validationNonceTo");
            var nonceFromValue = parseInt(nonceFromInput.value);
            nonceToInput.value = nonceFromValue+txnNumValue-1;
          }
        }

        const formM = document.getElementById("formM");
        formM.addEventListener("submit", function (event) {
          if (!formM.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
          }
          formM.classList.add("was-validated");
        });
        fetchNodeList();
        setInterval(fetchNodeList, 5000);

        const timestampInputM = document.getElementById("validationTimestampM");
        function updateTimestamp() {
          const currentTimestampM = Math.floor(Date.now() / 1000); // 获取当前时间的 UNIX 时间戳（秒）
          timestampInputM.value = currentTimestampM; // 更新时间戳字段
        }
        updateTimestamp();
        setInterval(updateTimestamp, 1000);
        document
          .getElementById("submitFormM")
          .addEventListener("click", function () {
            const spamTxnNum =
              document.getElementById("validationTxnNumM").value;
            const spamTxnFrom =
              document.getElementById("validationFromM").value;
            const spamTxnTo = document.getElementById("validationToM").value;
            const spamTxnOperation = document.getElementById(
              "validationOperationM",
            ).value;
            const spamTxnAmountMin = document.getElementById(
              "validationAmountMinM",
            ).value;
            const spamTxnAmountMax = document.getElementById(
              "validationAmountMaxM",
            ).value;
            const spamTxnData =
              document.getElementById("validationDataM").value;
            const spamTxnInfo =
              document.getElementById("validationInfoM").value;
            const selectedNode = validationNodeM.value;

            const formData = new FormData();
            formData.append("spamTxnNum", spamTxnNum);
            formData.append("spamTxnFrom", spamTxnFrom);
            formData.append("spamTxnTo", spamTxnTo);
            formData.append("spamTxnOperation", spamTxnOperation);
            formData.append("spamTxnAmountMin", spamTxnAmountMin);
            formData.append("spamTxnAmountMax", spamTxnAmountMax);
            formData.append("spamTxnData", spamTxnData);
            formData.append("spamTxnInfo", spamTxnInfo);
            formData.append("spamTxnNode", selectedNode);

            fetch("http://localhost:8000/SubmitTxn", {
              method: "POST",
              body: formData,
            })
              .then((response) => {
                if (response.ok) {
                  console.log("表单提交成功！");
                } else {
                  console.error("表单提交失败");
                }
              })
              .catch((error) => console.error("请求出错: " + error));
          });
      </script>
    </div>
    <Footer />
    <Scripts path={path} />
  </body>
</html>
