---
import Head from "../components/_head.astro";
import Footer from "../components/dashboard/_footer.astro";
import Topbar from "../components/dashboard/_topbar.astro";
import Sidenav from "../components/dashboard/_sidenav.astro";
import Scripts from "../components/_scripts.astro";

const title = "AdminLTE | Dashboard v2";
const path = "../../dist";
const mainPage = "dashboard";
const page = "index5";
---

<!doctype html>
<html lang="en">
  <!--begin::Head-->
  <head>
    <Head title={title} path={path} />
    <!-- apexcharts -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/apexcharts@3.37.1/dist/apexcharts.css"
      integrity="sha256-4MX+61mt9NVvvuPjUWdUdyfZfxSB1/Rf9WtqRHgG5S0="
      crossorigin="anonymous"
    />
  </head>
  <body class="layout-fixed sidebar-expand-lg bg-body-tertiary">
    <!--begin::App Wrapper-->
    <div class="app-wrapper">
      <Topbar path={path} />
      <Sidenav path={path} mainPage={mainPage} page={page} />
      <!--begin::App Main-->
      <main class="app-main">
        <!--begin::App Content Header-->
        <div class="app-content-header">
          <!--begin::Container-->
          <div class="container-fluid">
            <!--begin::Row-->
            <div class="row">
              <div class="col-sm-6">
                <h3 class="mb-0">节点运行面板</h3>
              </div>
              <div class="col-sm-6">
                <ol class="breadcrumb float-sm-end">
                  <li class="breadcrumb-item"><a href="#">面板</a></li>
                  <li class="breadcrumb-item active" aria-current="page">
                    节点运行面板
                  </li>
                </ol>
              </div>
            </div>
            <!--end::Row-->
          </div>
          <!--end::Container-->
        </div>
        <div class="app-content">
          <!--begin::Container-->
          <div class="container-fluid">
            <div
              class="info-box"
              style="width: 600px; padding: 1rem; margin-top: 2rem; margin-bottom: 1rem;"
            >
              <strong style="width: 20%; padding: 8px; ">所选节点:</strong>
              <select
                style="font-weight: bold; width: 40%; padding: 8px; appearance: none; -webkit-appearance: none; -moz-appearance: none; background: none; border: none; margin: 0; cursor: pointer; font-size: inherit; color: inherit; outline: none;"
                id="nodeSelectList"
                onchange="updateNodeStatus()"
              >
              </select>
              <strong style="width: 20%; padding: 8px; ">节点状态:</strong>
              <strong style="width: 20%; padding: 8px; " id="nodeStatus"
              ></strong>
            </div>

            <div
              class="info-box"
              style="padding: 1rem; margin-top: 2rem; margin-bottom: 1rem;"
            >
              <span class="info-box-icon">
                <i class="bi bi-gear-fill"></i>
              </span>
              <hr
                style="border-left: 1px solid #000; height: full; margin: 0 10px;"
              />
              <div class="col-5">
                <div class="info-box-content">
                  <div class="info-box-number">
                    公钥: <strong>
                      <span
                        id="nodePublicKey"
                        style="padding-left: 10px; padding-right: 10px;"
                      ></span></strong
                    >
                  </div>
                  <div class="info-box-number">
                    私钥: <strong
                      ><span
                        id="nodePrivateKey"
                        style="padding-left: 10px; padding-right: 10px;"
                      ></span></strong
                    >
                  </div>
                  <div class="info-box-number">
                    网内地址: <strong
                      ><span
                        id="nodeAddress"
                        style="padding-left: 10px; padding-right: 10px;"
                      ></span></strong
                    >
                  </div>
                  <div class="info-box-number">
                    网络带宽: <strong
                      ><span
                        id="nodeWidth"
                        style="padding-left: 10px; padding-right: 10px;"
                      ></span></strong
                    >
                  </div>
                  <div class="info-box-number">
                    行为模式: <strong
                      ><span
                        id="nodeMode"
                        style="padding-left: 10px; padding-right: 10px;"
                      ></span></strong
                    >
                  </div>
                </div>
              </div>

              <hr
                style="border-left: 1px solid #000; height: full; margin: 0 10px;"
              />
              <div class="col-5">
                <div class="info-box-content">
                  <div class="info-box-number">
                    当前Epoch: <strong>
                      <span
                        id="nodeCurrentEpoch"
                        style="padding-left: 10px; padding-right: 10px;"
                      ></span></strong
                    >
                  </div>
                  <div class="info-box-number">
                    当前共识阶段: <strong
                      ><span
                        id="nodeCurrentPhase"
                        style="padding-left: 10px; padding-right: 10px;"
                      ></span></strong
                    >
                  </div>
                  <div class="info-box-number">
                    当前容量: <strong
                      ><span
                        id="nodeCurrentCapacity"
                        style="padding-left: 10px; padding-right: 10px;"
                      ></span></strong
                    >
                  </div>
                  <div class="info-box-number">
                    当前日志高度: <strong
                      ><span
                        id="nodeCurrentBlockHeight"
                        style="padding-left: 10px; padding-right: 10px;"
                      ></span></strong
                    >
                  </div>
                </div>
              </div>
            </div>

            <!--begin::Row-->
            <div class="row">
              <div class="col-md-12">
                <div class="card mb-4">
                  <div class="card-header">
                    <h5 class="card-title">运行情况</h5>

                    <div class="card-tools">
                      <button
                        type="button"
                        class="btn btn-tool"
                        data-lte-toggle="card-collapse"
                      >
                        <i data-lte-icon="expand" class="bi bi-plus-lg"></i>
                        <i data-lte-icon="collapse" class="bi bi-dash-lg"></i>
                      </button>
                      <div class="btn-group">
                        <button
                          type="button"
                          class="btn btn-tool dropdown-toggle"
                          data-bs-toggle="dropdown"
                        >
                          <i class="bi bi-wrench"></i>
                        </button>
                        <div
                          class="dropdown-menu dropdown-menu-end"
                          role="menu"
                        >
                          <li
                            class="dropdown-item"
                            data-chart="txnThroughputChart"
                          >
                            事务吞吐率
                          </li>
                          <li
                            class="dropdown-item"
                            data-chart="blockThroughputChart"
                          >
                            块吞吐率
                          </li>
                          <li
                            class="dropdown-item"
                            data-chart="txnLatencyChart"
                          >
                            事务时延
                          </li>
                          <li
                            class="dropdown-item"
                            data-chart="blockLatencyChart"
                          >
                            块时延
                          </li>
                        </div>
                      </div>
                      <button
                        type="button"
                        class="btn btn-tool"
                        data-lte-toggle="card-remove"
                      >
                        <i class="bi bi-x-lg"></i>
                      </button>
                    </div>
                  </div>
                  <!-- /.card-header -->
                  <div class="card-body">
                    <!--begin::Row-->
                    <div class="row">
                      <div class="col-md-8">
                        <p class="text-center">
                          <strong id="chartName"></strong>
                           (近一分钟的每5s采样)
                        </p>

                        <div id="latency-throughput-chart"></div>
                      </div>
                      <!-- /.col -->
                      <div class="col-md-4">
                        <p class="text-center">
                          <strong>吞吐/时延总览(每5s采样)</strong>
                        </p>

                        <div class="progress-group">
                          事务吞吐率
                          <span class="float-end"
                            ><b id="txnThroughputText"></b>份</span
                          >
                          <div class="progress progress-sm">
                            <div
                              id="txnThroughputBar"
                              class="progress-bar text-bg-primary"
                              style="width: 80%"
                            >
                            </div>
                          </div>
                        </div>

                        <!-- /.progress-group -->
                        <div class="progress-group">
                          <span class="progress-text">块吞吐率</span>
                          <span class="float-end"
                            ><b id="blockThroughputText"></b>块</span
                          >
                          <div class="progress progress-sm">
                            <div
                              id="blockThroughputBar"
                              class="progress-bar text-bg-success"
                              style="width: 60%"
                            >
                            </div>
                          </div>
                        </div>

                        <!-- /.progress-group -->
                        <div class="progress-group">
                          事务时延
                          <span class="float-end"
                            ><b id="txnLatencyText"></b>ms</span
                          >
                          <div class="progress progress-sm">
                            <div
                              id="txnLatencyBar"
                              class="progress-bar text-bg-danger"
                              style="width: 75%"
                            >
                            </div>
                          </div>
                        </div>

                        <!-- /.progress-group -->
                        <div class="progress-group">
                          块时延
                          <span class="float-end"
                            ><b id="blockLatencyText"></b>ms</span
                          >
                          <div class="progress progress-sm">
                            <div
                              id="blockLatencyBar"
                              class="progress-bar text-bg-warning"
                              style="width: 50%"
                            >
                            </div>
                          </div>
                        </div>
                        <!-- /.progress-group -->
                      </div>
                      <!-- /.col -->
                    </div>
                    <!--end::Row-->
                  </div>
                  <!-- ./card-body -->
                  <div class="card-footer">
                    <!--begin::Row-->
                    <div class="row">
                      <div class="col-md-3 col-6">
                        <div class="text-center border-end">
                          <!-- InProgress<span class="text-success">
                                        <i class="bi bi-caret-up-fill"></i> 17%
                                      </span> -->
                          <h5 class="fw-bold mb-0">
                            <b id="txnThroughputAvgText"></b> 份/s
                          </h5>
                          <span class="text-uppercase">平均事务吞吐率</span>
                        </div>
                      </div>

                      <!-- /.col -->
                      <div class="col-md-3 col-6">
                        <div class="text-center border-end">
                          <!-- <span class="text-info">
                                        <i class="bi bi-caret-left-fill"></i> 0%
                                      </span> -->
                          <h5 class="fw-bold mb-0">
                            <b id="blockThroughputAvgText"></b> 块/s
                          </h5>
                          <span class="text-uppercase">平均块吞吐率</span>
                        </div>
                      </div>
                      <!-- /.col -->
                      <div class="col-md-3 col-6">
                        <div class="text-center border-end">
                          <!-- <span class="text-success">
                                        <i class="bi bi-caret-up-fill"></i> 20%
                                      </span> -->
                          <h5 class="fw-bold mb-0">
                            <b id="txnLatencyAvgText"></b> ms
                          </h5>
                          <span class="text-uppercase">平均事务时延</span>
                        </div>
                      </div>
                      <!-- /.col -->
                      <div class="col-md-3 col-6">
                        <div class="text-center">
                          <!-- <span class="text-danger">
                                        <i class="bi bi-caret-down-fill"></i> 18%
                                      </span> -->
                          <h5 class="fw-bold mb-0">
                            <b id="blockLatencyAvgText"></b>ms
                          </h5>
                          <span class="text-uppercase">平均块时延</span>
                        </div>
                      </div>
                    </div>
                    <!--end::Row-->
                  </div>
                  <!-- /.card-footer -->
                </div>
                <!-- /.card -->
              </div>
              <!-- /.col -->
            </div>

            <div class="row">
              <!-- Start col -->
              <div class="col-md-12">
                <!--begin::Latest Order Widget-->
                <div class="card">
                  <div class="card-header">
                    <h3 class="card-title"><strong>本地日志</strong></h3>
                    <div class="card-tools">
                      <button
                        type="button"
                        class="btn btn-tool"
                        data-lte-toggle="card-collapse"
                      >
                        <i data-lte-icon="expand" class="bi bi-plus-lg"></i>
                        <i data-lte-icon="collapse" class="bi bi-dash-lg"></i>
                      </button>
                      <button
                        type="button"
                        class="btn btn-tool"
                        data-lte-toggle="card-remove"
                      >
                        <i class="bi bi-x-lg"></i>
                      </button>
                    </div>
                  </div>
                  <!-- /.card-header -->
                  <div class="card-body p-0">
                    <div class="table-responsive">
                      <table class="table m-0">
                        <thead>
                          <tr>
                            <th>块编号</th>
                            <th>块内事务量</th>
                            <th>块状态</th>
                            <th>块阶段计时</th>
                          </tr>
                        </thead>
                        <tbody id="latestBlockTable"> </tbody>
                      </table>
                    </div>
                    <!-- /.table-responsive -->
                  </div>
                  <!-- /.card-body -->
                  <div class="card-footer clearfix">
                    <a
                      href="javascript:void(0)"
                      class="btn btn-sm btn-primary float-start"
                    >
                      添加新的事务
                    </a>
                    <a
                      href="javascript:void(0)"
                      class="btn btn-sm btn-secondary float-end"
                    >
                      查看所有事务
                    </a>
                  </div>
                  <!-- /.card-footer -->
                </div>
                <!-- /.card -->
              </div>
              <!-- /.col -->
            </div>
            <script is:inline>
              let totalNodeList = "";
              function fetchNodeInfo() {
                fetch("http://localhost:8000/AllNode")
                  .then((response) => {
                    if (response.ok) {
                      return response.json();
                    } else {
                      throw new Error("Failed to fetch data");
                    }
                  })
                  .then((data) => {
                    totalNodeList = data;
                    const nodeSelectList =
                      document.getElementById("nodeSelectList");
                    nodeSelectList.innerHTML = "";

                    data.forEach((node) => {
                      const optionElement = document.createElement("option");
                      optionElement.value = node.nodeNum;
                      optionElement.textContent = node.nodeName;
                      nodeSelectList.appendChild(optionElement);
                    });
                  })
                  .catch((error) => {
                    console.error("Error:", error);
                  });
              }

              function updateNodeStatus() {
                const selectedNodeNum =
                  document.getElementById("nodeSelectList").value;
                const nodeStatusElement = document.getElementById("nodeStatus");
                const nodePublicKeyElement =
                  document.getElementById("nodePublicKey");
                const nodePrivateKeyElement =
                  document.getElementById("nodePrivateKey");
                const nodeAddressElement =
                  document.getElementById("nodeAddress");
                const nodeWidthElement = document.getElementById("nodeWidth");
                const nodeModeElement = document.getElementById("nodeMode");
                const nodeCurrentEpochElement =
                  document.getElementById("nodeCurrentEpoch");
                const nodeCurrentPhaseElement =
                  document.getElementById("nodeCurrentPhase");
                const nodeCurrentCapacityElement = document.getElementById(
                  "nodeCurrentCapacity",
                );
                const nodeCurrentHeightElement =
                  document.getElementById("nodeCurrentBlockHeight");
                const selectedNode = getNodeInfoById(selectedNodeNum);
                if (selectedNode) {
                  nodeStatusElement.textContent = selectedNode.nodeStatus;
                  nodePublicKeyElement.textContent = selectedNode.nodePublicKey;
                  nodePrivateKeyElement.textContent = selectedNode.nodePrivateKey;
                  nodeAddressElement.textContent = selectedNode.nodeAddress;
                  nodeWidthElement.textContent = selectedNode.nodeWidth;
                  nodeModeElement.textContent = selectedNode.nodeMode;
                  nodeCurrentEpochElement.textContent =
                    selectedNode.nodeCurrentEpoch;
                  nodeCurrentPhaseElement.textContent =
                    selectedNode.nodeCurrentPhase;
                  nodeCurrentCapacityElement.textContent =
                    selectedNode.nodeCurrentCapacity;
                  nodeCurrentHeightElement.textContent =
                    selectedNode.nodeCurrentBlockHeight;
                } else {
                  nodeStatusElement.textContent = "未知状态";
                }
              }
              function getNodeInfoById(nodeNum) {
                const selectedNode = totalNodeList.find(
                  (node) => node.nodeNum == nodeNum,
                );
                return selectedNode;
              }

              fetchNodeInfo();
              setInterval(fetchNodeInfo, 5000);
            </script>
            <!--end::Container-->
          </div>
          <!--end::App Content-->
        </div>
        <!--end::App Main-->
        <Footer />
      </main>
      <!--end::App Wrapper-->
      <!--begin::Script-->
      <Scripts path={path} />

      <!-- OPTIONAL SCRIPTS -->

      <!-- apexcharts -->
      <script
        src="https://cdn.jsdelivr.net/npm/apexcharts@3.37.1/dist/apexcharts.min.js"
        integrity="sha256-+vh8GkaU7C9/wbSLIcwq82tQ2wTf44aOHA8HlBMwRI8="
        crossorigin="anonymous"></script>
      <script is:inline>
        //-----------------------
        // - THROUGHPUT/LATENCY CHART -
        //-----------------------

        /* apexcharts
         * -------
         * Here we will create a few charts using apexcharts
         */
        const chartData = {
          txnThroughputChart: {
            name: "事务吞吐率",
            data: [30, 40, 35, 50, 45, 60, 55, 70, 10, 1, 2, 3, 4],
          },
          blockThroughputChart: {
            name: "块吞吐率",
            data: [10, 20, 15, 30, 25, 40, 35, 50, 10, 2, 4, 6, 8],
          },
          txnLatencyChart: {
            name: "事务时延",
            data: [5, 10, 7, 15, 12, 20, 17, 25, 10, 3, 6, 9, 12],
          },
          blockLatencyChart: {
            name: "块时延",
            data: [8, 16, 12, 24, 20, 32, 28, 40, 10, 10, 10, 0, 10],
          },
        };
        const chartOptions = {
          series: [
            //默认使用事务吞吐率
            {
              name: chartData.txnThroughputChart.name,
              data: chartData.txnThroughputChart.data,
            },
          ],
          chart: {
            height: 180,
            type: "area",
            toolbar: {
              show: false,
            },
          },
          legend: {
            show: false,
          },
          dataLabels: {
            enabled: false,
          },
          stroke: {
            curve: "smooth",
          },
          xaxis: {
            categories: [
              "60s",
              "55s",
              "50s",
              "45s",
              "40s",
              "35s",
              "30s",
              "25s",
              "20s",
              "15s",
              "10s",
              "5s",
              "0s",
            ],
          },
        };
        const chartName = document.getElementById("chartName");
        chartName.innerHTML = "事务吞吐率";
        const latencyThroughputChart = new ApexCharts(
          document.querySelector("#latency-throughput-chart"),
          chartOptions,
        );
        latencyThroughputChart.render();
        //设置切换监听函数并切换曲线图
        document.querySelectorAll(".dropdown-item").forEach((item) => {
          item.addEventListener("click", () => {
            const selectedChart = item.getAttribute("data-chart");
            const chartConfig = chartData[selectedChart];
            latencyThroughputChart.updateSeries([
              {
                name: chartConfig.name,
                data: chartConfig.data,
              },
            ]);
            const chartName = document.getElementById("chartName");
            chartName.innerHTML = chartConfig.name;
          });
        });

        //---------------------------
        // - END THROUGHPUT/LATENCY CHART -
        //---------------------------

        //-------------------------
        //   Create Timer Chart
        //-------------------------

        function renderChart(selector, data) {
          const options = {
            series: [{ data }],
            xaxis: {
              categories: ["发布", "排队", "提交", "确认"],
            },
            chart: {
              type: "line",
              width: 150,
              height: 30,
              sparkline: {
                enabled: true,
              },
            },
            colors: ["var(--bs-primary)"],
            stroke: {
              width: 2,
            },
            tooltip: {
              fixed: {
                enabled: false,
              },
              x: {
                show: true,
              },
              y: {
                title: {
                  formatter: function (seriesName) {
                    return "计时:";
                  },
                },
                formatter: function (value) {
                  return value + "ms";
                },
              },
              marker: {
                show: false,
              },
            },
          };

          const chart = new ApexCharts(
            document.querySelector(selector),
            options,
          );
          chart.render();
        }
        function getStatusBadgeClassName(status) {
          switch (status) {
            case "Pending":
              return "badge text-bg-secondary";
            case "Committed":
              return "badge text-bg-primary";
            case "Finalized":
              return "badge text-bg-warning";
            case "Failed":
              return "badge text-bg-danger";
            case "Successed":
              return "badge text-bg-success";
            default:
              // 默认情况下使用蓝色
              return "badge text-bg-success";
          }
        }
        //-------------------------
        //   END CREATE Timer Chart
        //-------------------------

        //-----------------------
        // - Normal Info Box-
        //-----------------------

        function requestnormalInfo() {
          fetch("http://localhost:8000/normalInfo")
            .then((response) => {
              if (response.ok) {
                return response.json();
              } else {
                throw new Error("Failed to fetch data");
              }
            })
            .then((data) => {
              const { blockNum, txnNum, nodeNum, chainCodeNum } = data;

              console.log(data);

              //更新盒子信息
              const blockNumBox = document.getElementById("blockNumBox");
              blockNumBox.innerHTML = blockNum;
              const txnNumBox = document.getElementById("txnNumBox");
              txnNumBox.innerHTML = txnNum;
              const nodeNumBox = document.getElementById("nodeNumBox");
              nodeNumBox.innerHTML = nodeNum;
              const chainCodeNumBox =
                document.getElementById("chainCodeNumBox");
              chainCodeNumBox.innerHTML = chainCodeNum;
            })
            .catch((error) => {
              console.error("Error:", error);
            });
        }
        setInterval(requestnormalInfo, 5000);

        //-----------------------
        // - End Normal Info Box-
        //-----------------------

        //-----------------------
        // - Running Info Box-
        //-----------------------
        function requestRunningInfo() {
          fetch("http://localhost:8000/RunningInfo")
            .then((response) => {
              if (response.ok) {
                return response.json(); // 解析 JSON 响应
              } else {
                throw new Error("Failed to fetch data");
              }
            })
            .then((data) => {
              const {
                blockLatency,
                blockLatencyAvg,
                blockLatencyMax,
                blockThroughput,
                blockThroughputAvg,
                blockThroughputMax,
                txnLatency,
                txnLatencyAvg,
                txnLatencyMax,
                txnThroughput,
                txnThroughputAvg,
                txnThroughputMax,
              } = data;

              console.log(data);

              //更新box盒子信息
              const blockLatencyText =
                document.getElementById("blockLatencyText");
              blockLatencyText.innerHTML = blockLatency;
              const blockLatencyBar =
                document.getElementById("blockLatencyBar");
              blockLatencyBar.style.width =
                (100 * blockLatency) / blockLatencyMax + "%";
              const blockLatencyAvgText = document.getElementById(
                "blockLatencyAvgText",
              );
              blockLatencyAvgText.innerHTML = blockLatencyAvg;

              const blockThroughputText = document.getElementById(
                "blockThroughputText",
              );
              blockThroughputText.innerHTML = blockThroughput;
              const blockThroughputBar =
                document.getElementById("blockThroughputBar");
              blockThroughputBar.style.width =
                (100 * blockThroughput) / blockThroughputMax + "%";
              const blockThroughputAvgText = document.getElementById(
                "blockThroughputAvgText",
              );
              blockThroughputAvgText.innerHTML = blockThroughputAvg;

              const txnLatencyText = document.getElementById("txnLatencyText");
              txnLatencyText.innerHTML = txnLatency;
              const txnLatencyBar = document.getElementById("txnLatencyBar");
              txnLatencyBar.style.width =
                (100 * txnLatency) / txnLatencyMax + "%";
              const txnLatencyAvgText =
                document.getElementById("txnLatencyAvgText");
              txnLatencyAvgText.innerHTML = txnLatencyAvg;

              const txnThroughputText =
                document.getElementById("txnThroughputText");
              txnThroughputText.innerHTML = txnThroughput;
              const txnThroughputBar =
                document.getElementById("txnThroughputBar");
              txnThroughputBar.style.width =
                (100 * txnThroughput) / txnThroughputMax + "%";
              const txnThroughputAvgText = document.getElementById(
                "txnThroughputAvgText",
              );
              txnThroughputAvgText.innerHTML = txnThroughputAvg;

              //更新曲线信息
              chartData.txnThroughputChart.data.shift();
              chartData.txnThroughputChart.data.push(data.txnThroughput);

              chartData.blockThroughputChart.data.shift();
              chartData.blockThroughputChart.data.push(data.blockThroughput);

              chartData.txnLatencyChart.data.shift();
              chartData.txnLatencyChart.data.push(data.txnLatency);

              chartData.blockLatencyChart.data.shift();
              chartData.blockLatencyChart.data.push(data.blockLatency);

              latencyThroughputChart.updateOptions({});
            })
            .catch((error) => {
              console.error("Error:", error);
            });
        }
        setInterval(requestRunningInfo, 5000);

        //-----------------------
        // - Running Info Box-
        //-----------------------

        function requestBlockInfo() {
          fetch("http://localhost:8000/latestBlock")
            .then((response) => {
              if (response.ok) {
                return response.json();
              } else {
                throw new Error("Failed to fetch data");
              }
            })
            .then((data) => {
              // 获取父元素，用于添加生成的标签
              const parentElement = document.getElementById("latestBlockTable");
              const blockList = data;
              parentElement.innerHTML = "";
              console.log(blockList);

              // 遍历块数据并生成标签
              blockList.forEach((block) => {
                // 创建一个新表格行
                console.log(block);
                const newRow = document.createElement("tr");
                // 创建表格单元格并填充数据
                const cell1 = document.createElement("td");
                const blockNum = document.createElement("b");
                blockNum.textContent = "#" + block.blockNum;
                cell1.appendChild(blockNum);

                const cell2 = document.createElement("td");
                cell2.textContent = block.blockTxnNum;

                const cell3 = document.createElement("td");
                const statusBadge = document.createElement("span");
                statusBadge.textContent = block.blockStatus;
                statusBadge.className = getStatusBadgeClassName(
                  block.blockStatus,
                );
                cell3.appendChild(statusBadge);

                const cell4 = document.createElement("td");
                const sparklineDiv = document.createElement("div");
                sparklineDiv.id = "table-sparkline-" + block.blockNum;

                cell4.appendChild(sparklineDiv);

                // 将单元格添加到表格行
                newRow.appendChild(cell1);
                newRow.appendChild(cell2);
                newRow.appendChild(cell3);
                newRow.appendChild(cell4);
                // 将新行添加到父元素中
                parentElement.appendChild(newRow);
                renderChart("#" + sparklineDiv.id, block.blockTimer);
              });
            })
            .catch((error) => {
              console.error("Error:", error);
            });
        }
        setInterval(requestBlockInfo, 5000);

        //-------------
        // - PIE CHART -
        //-------------

        const pie_chart_options = {
          series: [700, 500, 400, 600, 300, 100],
          chart: {
            type: "donut",
          },
          labels: ["Chrome", "Edge", "FireFox", "Safari", "Opera", "IE"],
          dataLabels: {
            enabled: false,
          },
          colors: [
            "#0d6efd",
            "#20c997",
            "#ffc107",
            "#d63384",
            "#6f42c1",
            "#adb5bd",
          ],
        };

        const pie_chart = new ApexCharts(
          document.querySelector("#pie-chart"),
          pie_chart_options,
        );
        pie_chart.render();

        //-----------------
        // - END PIE CHART -
        //-----------------
      </script>
      <!--end::Script-->
      <!--end::Body-->
    </div>
  </body>
</html>
