---
import Head from "../components/_head.astro";
import Footer from "../components/dashboard/_footer.astro";
import Topbar from "../components/dashboard/_topbar.astro";
import Sidenav from "../components/dashboard/_sidenav.astro";
import Scripts from "../components/_scripts.astro";

const title = "AdminLTE | Dashboard v3";
const path = "../../dist";
const mainPage = "dashboard";
const page = "index4";
---

<!doctype html>
<html lang="en">
  <!--begin::Head-->
  <head>
    <Head title={title} path={path} />

    <!-- apexcharts -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/apexcharts@3.37.1/dist/apexcharts.css"
      integrity="sha256-4MX+61mt9NVvvuPjUWdUdyfZfxSB1/Rf9WtqRHgG5S0="
      crossorigin="anonymous"
    />
    <style>
      /* 添加隐藏样式，用于弹出的表格 */
      #blockInfoPopup {
        display: none;
        position: fixed; /* 使用fixed定位 */
        top: 50%; /* 居中垂直位置 */
        left: 50%; /* 居中水平位置 */
        transform: translate(-50%, -50%); /* 居中定位 */
        background: white;
        border: 1px solid #ccc;
        padding: 10px;
        z-index: 1000;
      }
    </style>
  </head>

  <body class="layout-fixed sidebar-expand-lg bg-body-tertiary">
    <!--begin::App Wrapper-->
    <div class="app-wrapper">
      <Topbar path={path} />
      <Sidenav path={path} mainPage={mainPage} page={page} />
      <!--begin::App Main-->
      <main class="app-main">
        <!--begin::App Content Header-->
        <div class="app-content-header">
          <!--begin::Container-->
          <div class="container-fluid">
            <!--begin::Row-->
            <div class="row">
              <div class="col-sm-6">
                <h3 class="mb-0">事务信息面板</h3>
              </div>
              <div class="col-sm-6">
                <ol class="breadcrumb float-sm-end">
                  <li class="breadcrumb-item"><a href="#">面板</a></li>
                  <li class="breadcrumb-item active" aria-current="page">
                    事务信息面板
                  </li>
                </ol>
              </div>
            </div>
            <!--end::Row-->
          </div>
          <!--end::Container-->
        </div>
        <div class="app-content">
          <!--begin::Container-->
          <div class="container-fluid">
            <!--begin::Row-->
            <div class="row">
              <div class="card mb-4">
                <div class="card-header">
                  <h3 class="card-title">事务信息表</h3>

                  <div class="card-tools">
                    <ul
                      class="pagination pagination-sm float-end"
                      id="pagination"
                    >
                      <li class="page-item">
                        <a class="page-link" href="#">&laquo;</a>
                      </li>
                    </ul>
                  </div>
                  <!-- /.card-header -->
                  <div class="card-body p-0">
                    <table class="table flex">
                      <thead>
                        <tr>
                          <th class="col-md-1">事务编号</th>
                          <th class="col-md-1">事务量摘要</th>
                          <th class="col-md-1">事务状态</th>
                          <th class="col-md-1">事务阶段计时</th>
                        </tr>
                      </thead>
                      <tbody id="blockInfoTableBody"> </tbody>
                    </table>
                  </div>
                  <!-- /.card-body -->
                  <!-- /.card -->
                  <!-- /.col-md-6 -->
                </div>
                <!--end::Row-->
              </div>
              <!--end::Container-->
            </div>
            <!--end::App Content-->
          </div>
          <div id="blockInfoPopup">
            <table>
              <tbody id="popupContent">
                <!-- 这里将显示弹出表格内容，不包含表头 -->
              </tbody>
            </table>
          </div>
          <!--end::App Main-->
          <Footer />
        </div>

        <!--end::App Wrapper-->
        <!--begin::Script-->
        <Scripts path={path} />

        <!-- OPTIONAL SCRIPTS -->

        <!-- apexcharts -->
        <script
          src="https://cdn.jsdelivr.net/npm/apexcharts@3.37.1/dist/apexcharts.min.js"
          integrity="sha256-+vh8GkaU7C9/wbSLIcwq82tQ2wTf44aOHA8HlBMwRI8="
          crossorigin="anonymous"></script>

        <script is:inline>
          function renderChart(selector, data) {
            const options = {
              series: [{ data }],
              xaxis: {
                categories: ["发布", "排队", "提交", "确认"],
              },
              chart: {
                type: "line",
                width: 150,
                height: 30,
                sparkline: {
                  enabled: true,
                },
              },
              colors: ["var(--bs-primary)"],
              stroke: {
                width: 2,
              },
              tooltip: {
                fixed: {
                  enabled: false,
                },
                x: {
                  show: true,
                },
                y: {
                  title: {
                    formatter: function (seriesName) {
                      return "计时:";
                    },
                  },
                  formatter: function (value) {
                    return value + "ms";
                  },
                },
                marker: {
                  show: false,
                },
              },
            };

            const chart = new ApexCharts(
              document.querySelector(selector),
              options,
            );
            chart.render();
          }
          const pagination = document.getElementById("pagination");
          let currentPage = 1;

          function updatePagination(blockList) {
            pagination.innerHTML = "";
            pagination.innerHTML += `
      <li class="page-item">
          <a class="page-link" href="#">&laquo;</a>
      </li>
  `;
            const itemsPerPage = 10; // 每页显示的项目数量
            const totalItems = blockList.length; // blockList 的长度
            const totalPages = Math.ceil(totalItems / itemsPerPage); // 总页数
            const startPage = Math.max(1, currentPage - 1);
            const endPage = Math.min(currentPage + 1, totalPages);
            for (let i = startPage; i <= endPage; i++) {
              pagination.innerHTML += `
        <li class="page-item">
            <a class="page-link" href="#" data-page="${i}">${i}</a>
        </li>
    `;
            }
            pagination.innerHTML += `
      <li class="page-item">
          <a class="page-link" href="#">&raquo;</a>
      </li>
  `;
            // 给分页按钮添加点击事件监听器
            const pageLinks = pagination.querySelectorAll(".page-link");
            pageLinks.forEach((link) => {
              link.addEventListener("click", () => {
                if (link.dataset.page) {
                  currentPage = parseInt(link.dataset.page);
                  fetchBlock(); // 在点击按钮时调用 fetchBlock 函数
                  updatePagination();
                } else if (link.textContent === "«") {
                  currentPage = Math.max(1, currentPage - 3);
                  fetchBlock(); // 在点击按钮时调用 fetchBlock 函数
                  updatePagination();
                } else if (link.textContent === "»") {
                  currentPage = Math.min(totalPages, currentPage + 3);
                  fetchBlock(); // 在点击按钮时调用 fetchBlock 函数
                  updatePagination();
                }
              });
            });
          }

          function fetchBlock() {
            fetch("http://localhost:8000/AllBlock")
              .then((response) => response.json())
              .then((data) => {
                // 将从服务器获取的数据存储在 blockList 中
                blockList = data;
                // 更新表格内容
                updatePagination(blockList);
                fillComponentsWithData(blockList);
              })
              .catch((error) => {
                console.error("Error fetching data:", error);
              });
          }

          function renderEmptyComponents() {
            const tbody = document.getElementById("blockInfoTableBody");
            // 清空现有的表格内容
            tbody.innerHTML = "";

            // 定义需要渲染的空组件数量
            const itemsPerPage = 10;

            for (let i = 0; i < itemsPerPage; i++) {
              const row = document.createElement("tr");
              row.className = "align-middle";

              const cell = document.createElement("td");
              cell.colSpan = 4;
              cell.style.padding = "0";

              const card = document.createElement("div");
              card.className = "card card-outline card-success";
              card.style.border = "1px";

              const cardHeader = document.createElement("div");
              cardHeader.className = "card-header";

              const cardHeaderContent = document.createElement("div");
              cardHeaderContent.style.display = "flex";
              cardHeaderContent.style.justifyContent = "space-between";

              const blockNum = document.createElement("b");
              blockNum.className = "card-title col-md-1";
              blockNum.textContent = "#";

              const blockTxnNum = document.createElement("p");
              blockTxnNum.className = "col-md-1";
              blockTxnNum.textContent = "0";

              const blockStatus = document.createElement("p");
              blockStatus.className = "col-md-1";

              const blockTimer = document.createElement("p");
              blockTimer.className = "col-md-1";

              const button = document.createElement("button");
              button.type = "button";
              button.className = "btn btn-tool";
              button.setAttribute("data-lte-toggle", "card-collapse");
              button.style.color = "black";
              button.title = "Block Number";

              const plusIcon = document.createElement("i");
              plusIcon.className = "bi bi-plus-lg";
              plusIcon.setAttribute("data-lte-icon", "expand");

              const dashIcon = document.createElement("i");
              dashIcon.className = "bi bi-dash-lg";
              dashIcon.setAttribute("data-lte-icon", "collapse");

              button.appendChild(plusIcon);
              button.appendChild(dashIcon);

              const cardTools = document.createElement("div");
              cardTools.className = "card-tools";
              cardTools.appendChild(button);

              cardHeaderContent.appendChild(blockNum);
              cardHeaderContent.appendChild(blockStatus);
              cardHeaderContent.appendChild(blockTxnNum);
              cardHeaderContent.appendChild(blockTimer);
              cardHeaderContent.appendChild(cardTools);

              cardHeader.appendChild(cardHeaderContent);

              const cardBody = document.createElement("div");
              cardBody.className = "card-body";
              const firstParagraph = document.createElement("p");
              cardBody.appendChild(firstParagraph);
              const secondParagraph = document.createElement("p");
              cardBody.appendChild(secondParagraph);

              card.appendChild(cardHeader);
              card.appendChild(cardBody);
              cell.appendChild(card);
              row.appendChild(cell);
              tbody.appendChild(row);
            }
          }
          function fillComponentsWithData(blockList) {
            const itemsPerPage = 10;
            const tbody = document.getElementById("blockInfoTableBody");

            // 计算要显示的数据范围
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;

            for (let i = 0; i < itemsPerPage; i++) {
              const row = tbody.children[i];
              row.style.display = "none";
              const dataIndex = startIndex + i;

              if (dataIndex < blockList.length) {
                const block = blockList[dataIndex];
                const blockNum = row.querySelector(".card-title");
                const blockTxnNum = row.querySelector(
                  ".card-header p:nth-child(2)",
                );
                const blockStatus = row.querySelector(
                  ".card-header p:nth-child(3)",
                );
                const blockTimer = row.querySelector(
                  ".card-header p:nth-child(4)",
                );

                blockNum.textContent = `#${block.blockNum}`;
                blockTxnNum.textContent = `${block.blockTxnNum}`;
                blockStatus.innerHTML = "";

                // 设置新内容
                blockStatus.textContent = `${block.blockStatus}`;

                switch (block.blockStatus) {
                  case "Pending":
                    blockStatus.className = "badge text-bg-primary";
                    break;
                  case "Committed":
                    blockStatus.className = "badge text-bg-warning";
                    break;
                  case "Finalized":
                    blockStatus.className = "badge text-bg-success";
                    break;
                  case "Failed":
                    blockStatus.className = "badge text-bg-danger";
                    break;
                  default:
                    // 默认情况下使用蓝色
                    blockStatus.className = "badge text-bg-primary";
                }

                // 清空 blockTimer 的内容
                blockTimer.innerHTML = "";

                // 设置新内容
                const sparklineDiv = document.createElement("div");
                sparklineDiv.id = "table-sparkline-" + block.blockNum;
                blockTimer.appendChild(sparklineDiv);
                renderChart("#" + sparklineDiv.id, block.blockTimer);


                const blockFirst = row.querySelector(".card-body p:nth-child(1)");
                blockFirst.textContent = "Card content for row";
                const blockSecond = row.querySelector(".card-body p:nth-child(2)");


                // 使组件可见
                row.style.display = "table-row";
              } else {
                // 如果数据不足，将渲染的空组件设置为不可见
                row.style.display = "none";
              }
            }
          }
          renderEmptyComponents();
          fetchBlock();

          // 初始页面加载时调用一次 fetchBlock，更新表格内容
        </script>
        <!--end::Script-->
      </main><!--end::Body-->
    </div>
  </body>
</html>
