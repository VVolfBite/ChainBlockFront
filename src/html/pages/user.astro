---
import Head from "../components/_head.astro";
import Footer from "../components/dashboard/_footer.astro";
import Topbar from "../components/dashboard/_topbar.astro";
import Sidenav from "../components/dashboard/_sidenav.astro";
import Scripts from "../components/_scripts.astro";

const title = "AdminLTE v4 | Dashboard";
const path = "../../dist";
const mainPage = "dashboard";
const page = "index";
---

<!doctype html>
<html lang="en">
  <head>
    <Head title={title} path={path} />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/apexcharts@3.37.1/dist/apexcharts.css"
      integrity="sha256-4MX+61mt9NVvvuPjUWdUdyfZfxSB1/Rf9WtqRHgG5S0="
      crossorigin="anonymous"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/jsvectormap@1.5.3/dist/css/jsvectormap.min.css"
      integrity="sha256-+uGLJmmTKOqBr+2E6KDYs/NRsHxSkONXFHUL0fy2O/4="
      crossorigin="anonymous"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/apexcharts@3.37.1/dist/apexcharts.css"
      integrity="sha256-4MX+61mt9NVvvuPjUWdUdyfZfxSB1/Rf9WtqRHgG5S0="
      crossorigin="anonymous"
    />
  </head>
  <body class="layout-fixed sidebar-expand-lg bg-body-tertiary">
    <div class="app-wrapper">
      <Topbar path={path} />
      <Sidenav path={path} mainPage={mainPage} page={page} />
      <main class="app-main">
        <div class="app-content-header">
          <div class="container-fluid">
            <div class="row">
              <div class="col-sm-6">
                <h3 class="mb-0">客户面板</h3>
              </div>
              <div class="col-sm-6">
                <ol class="breadcrumb float-sm-end">
                  <li class="breadcrumb-item"><a href="#">客户面板</a></li>
                  <li class="breadcrumb-item active" aria-current="page">
                    面板
                  </li>
                </ol>
              </div>
            </div>
            <div class="row">
              <div class="col-12">
                <div
                  class="info-box"
                  style="padding: 1rem; margin-top: 2rem; margin-bottom: 1rem;"
                >
                  <span class="info-box-icon">
                    <i class="bi bi-person-lines-fill"></i>
                  </span>
                  <div class="col-4">
                    <div class="info-box-content">
                      <strong class="info-box-text">
                        用户邮箱:&emsp;<span id="userEmailSpan"></span>
                      </strong>
                      <strong class="info-box-text">
                        用户地址:&emsp;<span id="userAddressSpan"></span>
                      </strong>
                      <hr />
                      <div class="info-box-number">
                        提交Nonce数: <strong>
                          <span
                            id="userCommittedNonceSpan"
                            style="padding-left: 10px; padding-right: 10px;"
                          ></span></strong
                        >
                      </div>
                      <div class="info-box-number">
                        验证Nonce数: <strong
                          ><span
                            id="userVerifiedNonceSpan"
                            style="padding-left: 10px; padding-right: 10px;"
                          ></span></strong
                        >
                      </div>
                    </div>
                  </div>
                  <hr
                    style="border-left: 1px solid #000; height: full; margin: 0 10px;"
                  />
                  <span class="info-box-icon">
                    <i class="bi bi-wallet2"></i>
                  </span>
                  <div class="info-box-content">
                    <strong>
                      <table>
                        <thead>
                          <tr>
                            <th class="col-md-1">资产</th>
                            <th class="col-md-1">余额</th>
                          </tr>
                        </thead>
                        <tbody id="userAssetListTbody"></tbody>
                      </table>
                    </strong>
                  </div>
                </div>
              </div>
            </div>
            <script is:inline>
              //客户面板
              function fillUserInfoCompomentsWithData(userData) {
                const userEmailSpan = document.getElementById("userEmailSpan");
                if (userEmailSpan) userEmailSpan.innerHTML = userData.userEmail;

                const userAddressSpan =
                  document.getElementById("userAddressSpan");
                if (userAddressSpan)
                  userAddressSpan.value = userData.userAddress;

                const userCommittedNonceSpan = document.getElementById(
                  "userCommittedNonceSpan",
                );
                if (userCommittedNonceSpan)
                  userCommittedNonceSpan.textContent =
                    userData.userCommittedNonce;
                const userVerifiedNonceSpan = document.getElementById(
                  "userVerifiedNonceSpan",
                );
                if (userVerifiedNonceSpan)
                  userVerifiedNonceSpan.textContent =
                    userData.userVerifiedNonce;

                const userAssetListTbody =
                  document.getElementById("userAssetListTbody");

                if (userAssetListTbody) {
                  userAssetListTbody.innerHTML = "";
                  const hrline = document.createElement("tr");
                  const hrCell1 = document.createElement("td");
                  hrCell1.innerHTML = "<hr/>";
                  const hrCell2 = document.createElement("td");
                  hrCell2.innerHTML = "<hr/>";
                  hrline.appendChild(hrCell1);
                  hrline.appendChild(hrCell2);
                  userAssetListTbody.appendChild(hrline);
                  userData.userAssetList["Balance"] = userData.userBalance;
                  for (const key in userData.userAssetList) {
                    const assetName = key;
                    const assetAmount = userData.userAssetList[key];

                    const row = document.createElement("tr");

                    const assetNameCell = document.createElement("td");
                    assetNameCell.textContent = assetName;

                    const assetAmountCell = document.createElement("td");
                    assetAmountCell.textContent = assetAmount;

                    row.appendChild(assetNameCell);
                    row.appendChild(assetAmountCell);

                    userAssetListTbody.appendChild(row);
                  }
                }

                const nonceInput = document.getElementById("formNonce");
                if (nonceInput) {
                  nonceInput.value = userData.userCommitedNonce + 1;
                }
                const nonceFromInput = document.getElementById("formNonceFrom");
                if (nonceFromInput) {
                  nonceFromInput.value = userData.userCommitedNonce + 1;
                }
                const nonceToInput = document.getElementById("formNonceTo");
                if (nonceToInput) {
                  nonceToInput.value = userData.userCommitedNonce + 1;
                }
              }
              function fetchUser() {
                const userEmail = localStorage.getItem("userEmail");
                const userToken = localStorage.getItem("userToken");
                const formData = new FormData();
                formData.append("userEmail", userEmail);
                formData.append("userToken", userToken);
                const requestOptions = {
                  method: "POST",
                  body: formData,
                };
                fetch("http://localhost:8000/user", requestOptions)
                  .then((response) => {
                    if (response.ok) {
                      return response.json();
                    } else {
                      throw new Error("Failed to fetch user data");
                    }
                  })
                  .then((data) => {
                    fillUserInfoCompomentsWithData(data);
                  })
                  .catch((error) => {
                    console.error("Error:", error);
                  });
              }
              fetchUser();
              setInterval(fetchUser, 5000);
            </script>
          </div>
        </div>

        <div class="app-content">
          <div class="container-fluid">
            <div class="row">
              <!-- 本地提交事务 -->
              <div class="col-md-7">
                <div class="card">
                  <div class="card-header">
                    <h3 class="card-title"><strong>该客户提交事务</strong></h3>
                    <div class="card-tools">
                      <button
                        type="button"
                        class="btn btn-tool"
                        data-lte-toggle="card-collapse"
                      >
                        <i data-lte-icon="expand" class="bi bi-plus-lg"></i>
                        <i data-lte-icon="collapse" class="bi bi-dash-lg"></i>
                      </button>
                    </div>
                  </div>
                  <div class="card-body p-0">
                    <div class="table-responsive">
                      <table class="table m-0">
                        <thead>
                          <tr>
                            <th style="flex: 0 0 auto; width: 10%;">编号</th>
                            <th style="flex: 0 0 auto; width: 8%;">操作</th>
                            <th style="flex: 0 0 auto; width: 8%;">数值</th>
                            <th style="flex: 0 0 auto; width: 20%;">来自</th>
                            <th style="flex: 0 0 auto; width: 20%;">发往</th>
                            <th style="flex: 0 0 auto; width: 10%;">状态</th>
                            <th style="flex: 0 0 auto; width: 4%;"></th>
                          </tr>
                        </thead>
                        <tbody id="userTxnTbody"> </tbody>
                      </table>
                    </div>
                  </div>
                  <div class="card-footer clearfix">
                    <a
                      href="javascript:void(0)"
                      class="btn btn-sm btn-primary float-start"
                    >
                      添加新的事务
                    </a>
                    <a
                      href="javascript:void(0)"
                      class="btn btn-sm btn-secondary float-end"
                    >
                      查看所有事务
                    </a>
                  </div>
                </div>
              </div>
              <script
                src="https://cdn.jsdelivr.net/npm/apexcharts@3.37.1/dist/apexcharts.min.js"
                integrity="sha256-+vh8GkaU7C9/wbSLIcwq82tQ2wTf44aOHA8HlBMwRI8="
                crossorigin="anonymous"></script>
              <script is:inline>
                const CHART_NUMBER = 30; // 你需要的图表数量
                const timerChartOptions = {
                  series: [],
                  xaxis: { categories: ["发布", "排队", "提交", "确认"] },
                  chart: {
                    type: "line",
                    width: 150,
                    height: 30,
                    sparkline: { enabled: true },
                  },
                  colors: ["var(--bs-primary)"],
                  stroke: { width: 2 },
                  tooltip: {
                    fixed: { enabled: false },
                    x: { show: true },
                    y: {
                      title: {
                        formatter: function (seriesName) {
                          return "计时:";
                        },
                      },
                      formatter: function (value) {
                        return value + "ms";
                      },
                    },
                    marker: { show: false },
                  },
                };

                const chartList = [];
                const chartDivList = [];

                for (let i = 1; i <= CHART_NUMBER; i++) {
                  const chartDiv = document.createElement("div");
                  chartDiv.id = `timerChart${i}`;
                  document.body.appendChild(chartDiv); // Assuming you want to append the charts to the body element
                  const chart = new ApexCharts(
                    document.querySelector(`#${chartDiv.id}`),
                    timerChartOptions,
                  );
                  chartDiv.style.display = "none";
                  chart.render();
                  chartList.push(chart);
                  chartDivList.push(chartDiv);
                }

                function getStatusBadgeClassName(status) {
                  switch (status) {
                    case "Pending":
                      return "badge text-bg-secondary";
                    case "Committed":
                      return "badge text-bg-primary";
                    case "Finalized":
                      return "badge text-bg-warning";
                    case "Failed":
                      return "badge text-bg-danger";
                    case "Success":
                      return "badge text-bg-success";
                    default:
                      // 默认情况下使用蓝色
                      return "badge text-bg-success";
                  }
                }

                function requestTxnInfoByUser() {
                  const userEmail = localStorage.getItem("userEmail");
                  const userToken = localStorage.getItem("userToken");
                  const formData = new FormData();
                  formData.append("userEmail", userEmail);
                  formData.append("userToken", userToken);
                  const requestOptions = {
                    method: "POST",
                    body: formData,
                  };
                  fetch("http://localhost:8000/txnByUser", requestOptions)
                    .then((response) => {
                      if (response.ok) {
                        return response.json();
                      } else {
                        throw new Error("Failed to fetch user data");
                      }
                    })
                    .then((data) => {
                      chartDivList.forEach((chartDiv) => {
                        chartDiv.style.display = "none";
                      });

                      const userTxnTbody =
                        document.getElementById("userTxnTbody");
                      const txnList = data;
                      userTxnTbody.innerHTML = "";
                      txnList.forEach((txn, index) => {
                        txn.txnTimer = [
                          txn.txnTimer[0] - txn.txnTimeStamp,
                          txn.txnTimer[1] - txn.txnTimeStamp,
                          txn.txnTimer[2] - txn.txnTimeStamp,
                          txn.txnTimer[3] - txn.txnTimeStamp,
                        ];

                        const txnRow = document.createElement("tr");
                        const txnID = document.createElement("td");
                        const txnId = document.createElement("b");
                        txnId.textContent = "#" + txn.txnId;
                        txnID.appendChild(txnId);
                        const txnOperation = document.createElement("td");
                        txnOperation.textContent = txn.txnOperation;
                        const txnValue = document.createElement("td");
                        txnValue.textContent = txn.txnValue;
                        const txnFrom = document.createElement("td");
                        txnFrom.textContent = txn.txnFrom;
                        const txnTo = document.createElement("td");
                        txnTo.textContent = txn.txnTo;
                        const statusBar = document.createElement("td");
                        const statusBadge = document.createElement("span");
                        statusBadge.textContent = txn.txnStatus;
                        statusBadge.className = getStatusBadgeClassName(
                          txn.txnStatus,
                        );
                        statusBar.appendChild(statusBadge);

                        txnRow.appendChild(txnID);
                        txnRow.appendChild(txnOperation);
                        txnRow.appendChild(txnValue);
                        txnRow.appendChild(txnFrom);
                        txnRow.appendChild(txnTo);
                        txnRow.appendChild(statusBar);

                        userTxnTbody.appendChild(txnRow);
                      });
                    })
                    .catch((error) => {
                      console.error("Error:", error);
                    });
                }
                requestTxnInfoByUser();
                setInterval(requestTxnInfoByUser, 5000);
              </script>

              <div class="card mb-4 col-md-5">
                <div class="card-header">
                  <ul class="nav nav-tabs">
                    <li class="nav-item">
                      <button
                        class="nav-link active"
                        id="singleTxn-tab"
                        data-bs-toggle="tab"
                        data-bs-target="#singleTxn"
                        type="button"
                        aria-selected="true">单次事务提交</button
                      >
                    </li>
                    <li class="nav-item">
                      <button
                        class="nav-link"
                        id="multiTxn-tab"
                        data-bs-toggle="tab"
                        data-bs-target="#multiTxn"
                        type="button"
                        aria-selected="false">批量事务提交</button
                      >
                    </li>
                  </ul>
                  <div class="card-tools">
                    <button
                      type="button"
                      class="btn btn-tool"
                      data-lte-toggle="card-collapse"
                    >
                      <i data-lte-icon="expand" class="bi bi-plus-lg"></i>
                      <i data-lte-icon="collapse" class="bi bi-dash-lg"></i>
                    </button>
                  </div>
                </div>
                <div class="tab-content">
                  <div
                    class="tab-pane fade show active"
                    id="singleTxn"
                    role="tabpanel"
                    aria-labelledby="singleTxn-tab"
                  >
                    <form class="needs-validation" id="form" novalidate>
                      <div class="card-body">
                        <div class="row g-3">
                          <div class="col-md-6">
                            <label class="form-label">事务时间戳:</label>
                            <input
                              type="text"
                              class="form-control"
                              id="formTimestamp"
                              required
                              disabled
                            />
                          </div>
                          <div class="col-md-6">
                            <label class="form-label">事务Nonce号:</label>
                            <input
                              type="text"
                              class="form-control"
                              id="formNonce"
                              required
                              disabled
                            />
                          </div>
                          <hr />
                          <div class="col-md-6">
                            <label for="formTxnFrom" class="form-label"
                              >事务来自:</label
                            >
                            <div class="input-group has-validation">
                              <span
                                class="input-group-text"
                                id="inputGroupPrepend">用户</span
                              >
                              <input
                                type="text"
                                class="form-control"
                                id="formTxnFrom"
                                aria-describedby="inputGroupPrepend"
                                required
                              />
                              <div class="valid-feedback">格式正确。</div>
                              <div class="invalid-feedback">
                                用户名只能包含大小写字母、数字和下划线。
                              </div>
                            </div>
                          </div>

                          <div class="col-md-6">
                            <label for="formTxnTo" class="form-label"
                              >事务发往:</label
                            >
                            <div class="input-group has-validation">
                              <span
                                class="input-group-text"
                                id="inputGroupPrepend">用户</span
                              >
                              <input
                                type="text"
                                class="form-control"
                                id="formTxnTo"
                                aria-describedby="inputGroupPrepend"
                                required
                              />
                              <div class="valid-feedback">格式正确。</div>
                              <div class="invalid-feedback">
                                用户名只能包含大小写字母、数字和下划线。
                              </div>
                            </div>
                          </div>

                          <div class="col-md-6">
                            <label for="txnOperation" class="form-label"
                              >事务操作:</label
                            >
                            <div class="input-group has-validation">
                              <span
                                class="input-group-text"
                                id="inputGroupPrepend">Op-</span
                              >
                              <input
                                type="text"
                                class="form-control"
                                id="formTxnOperation"
                                aria-describedby="inputGroupPrepend"
                                required
                                pattern="[A-Za-z0-9_]+"
                              />
                              <div class="valid-feedback">格式正确。</div>
                              <div class="invalid-feedback">
                                合法操作由大小写字母、数字和下划线。
                              </div>
                            </div>
                          </div>

                          <div class="col-md-6">
                            <label for="txnAmount" class="form-label"
                              >事务数值:</label
                            >
                            <div class="input-group has-validation">
                              <span
                                class="input-group-text"
                                id="inputGroupPrepend">$</span
                              >
                              <input
                                type="text"
                                class="form-control"
                                id="txnAmount"
                                aria-describedby="inputGroupPrepend"
                                required
                                pattern="^([1-9][0-9]*|0)(\.[0-9]+)?$"
                              />
                              <div class="valid-feedback">格式正确。</div>
                              <div class="invalid-feedback">
                                请输入合法的数字。
                              </div>
                            </div>
                          </div>

                          <div class="col-md-12">
                            <label for="txnData" class="form-label"
                              >事务数据:</label
                            >
                            <div class="input-group has-validation">
                              <textarea
                                class="form-control"
                                id="txnData"
                                aria-describedby="inputGroupPrepend"
                                rows="5"></textarea>
                              <div class="valid-feedback">格式正确。</div>
                              <div class="invalid-feedback">请输入内容。</div>
                            </div>
                          </div>

                          <div class="col-md-12">
                            <label for="txnInfo" class="form-label"
                              >事务附加信息:</label
                            >
                            <div class="input-group has-validation">
                              <textarea
                                class="form-control"
                                id="txnInfo"
                                aria-describedby="inputGroupPrepend"
                                rows="5"></textarea>
                              <div class="valid-feedback">格式正确。</div>
                              <div class="invalid-feedback">请输入内容。</div>
                            </div>
                          </div>

                          <hr />

                          <div class="col-md-12">
                            <label for="formNode" class="form-label"
                              >发送节点:</label
                            >
                            <select class="form-select" id="formNode" required>
                            </select>
                            <div class="valid-feedback">选择合法。</div>
                            <div class="invalid-feedback">
                              必须选择一种节点。
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="card-footer">
                        <button
                          type="reset"
                          class="btn btn-secondary col-md-2"
                          style="background-color: gray;"
                        >
                          重置
                        </button>
                        <button
                          type="submit"
                          class="btn btn-success col-md-2 float-end"
                          id="submitForm"
                        >
                          提交
                        </button>
                      </div>
                    </form>
                  </div>
                  <script is:inline>
                    const formNode = document.getElementById("formNode");
                    function fetchNodeList() {
                      fetch("http://localhost:8000/allNode")
                        .then((response) => response.json())
                        .then((data) => {
                          formNode.innerHTML = "";
                          formNode.options[0] = new Option("广播", "Broadcast");
                          data.forEach(function (node, index) {
                            formNode.options[index + 1] = new Option(
                              node.nodeId + "." + node.nodeName,
                              node.nodeId,
                            );
                          });
                        })
                        .catch((error) => console.error("请求出错: " + error));
                    }
                    // 为了防止用户在选择时出现渲染，所以每次网页加载只请求一次...
                    fetchNodeList();

                    const userCommittedNonceSpan = document.getElementById(
                      "userCommittedNonceSpan",
                    );
                    const formNonce = document.getElementById("formNonce");
                    function updateNonce() {
                      formNonce.value = userCommittedNonceSpan.innerHTML;
                    }
                    updateNonce();
                    setInterval(updateNonce, 50);

                    const timestampInput =
                      document.getElementById("formTimestamp");

                    function updateTimestamp() {
                      const currentTimestamp = Math.floor(Date.now() / 1000);
                      timestampInput.value = currentTimestamp;
                    }
                    updateTimestamp();
                    setInterval(updateTimestamp, 1000);

                    const form = document.getElementById("form");
                    form.addEventListener("submit", function (event) {
                      if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                      }
                      form.classList.add("was-validated");
                    });
                    document
                      .getElementById("submitForm")
                      .addEventListener("click", function () {
                        const txnFrom =
                          document.getElementById("formTxnFrom").value;

                        const txnTo =
                          document.getElementById("formTxnTo").value;
                        const txnOperation =
                          document.getElementById("formTxnOperation").value;

                        const txnAmount =
                          document.getElementById("txnAmount").value;

                        const txnData =
                          document.getElementById("txnData").value;

                        const txnInfo =
                          document.getElementById("txnInfo").value;
                        const selectedNode = formNode.value;

                        const formData = new FormData();

                        formData.append("txnFrom", txnFrom);
                        formData.append("txnTo", txnTo);
                        formData.append("txnOperation", txnOperation);
                        formData.append("txnValue", txnAmount);
                        formData.append("txnData", txnData);
                        formData.append("txnInfo", txnInfo);
                        formData.append("txnNode", selectedNode);
                        console.log(formData);

                        fetch("http://localhost:8000/submitTxn", {
                          method: "POST",
                          body: formData,
                        })
                          .then((response) => {
                            if (response.ok) {
                              console.log("第一个表单提交成功！");
                            } else {
                              console.error("第一个表单提交失败");
                            }
                          })
                          .catch((error) =>
                            console.error("请求出错: " + error),
                          );
                      });
                  </script>

                  <div
                    class="tab-pane fade"
                    id="multiTxn"
                    role="tabpanel"
                    aria-labelledby="multiTxn-tab"
                  >
                    <form class="needs-validation" id="formM" novalidate>
                      <div class="card-body">
                        <div class="row g-3">
                          <div class="col-md-6">
                            <label for="formTxnNumM" class="form-label"
                              >事务生成数量:</label
                            >
                            <input
                              type="text"
                              class="form-control"
                              id="formTxnNumM"
                              required
                              pattern="^([1-9][0-9]*|0)(\.[0-9]+)?$"
                            />
                            <div class="valid-feedback">格式正确。</div>
                            <div class="invalid-feedback">请输入合法数字。</div>
                          </div>
                          <div class="col-md-6">
                            <label class="form-label">事务时间戳:</label>
                            <input
                              type="text"
                              class="form-control"
                              id="formTimestampM"
                              required
                              disabled
                            />
                          </div>
                          <hr />
                          <div class="col-md-12">
                            <label for="formTxnFromM" class="form-label"
                              >事务来自:</label
                            >
                            <div class="input-group has-validation">
                              <span
                                class="input-group-text"
                                id="inputGroupPrependM">用户</span
                              >
                              <input
                                type="text"
                                class="form-control"
                                id="formTxnFromM"
                                aria-describedby="inputGroupPrepend"
                                required
                              />
                              <div class="valid-feedback">格式正确。</div>
                              <div class="invalid-feedback">
                                用户名只能包含大小写字母、数字和下划线，多个用户名用分号隔开并紧跟在分号后。
                              </div>
                            </div>
                          </div>

                          <div class="col-md-12">
                            <label for="formTxnToM" class="form-label"
                              >事务发往:</label
                            >
                            <div class="input-group has-validation">
                              <span
                                class="input-group-text"
                                id="inputGroupPrependM">用户</span
                              >
                              <input
                                type="text"
                                class="form-control"
                                id="formTxnToM"
                                aria-describedby="inputGroupPrepend"
                                required
                              />
                              <div class="valid-feedback">格式正确。</div>
                              <div class="invalid-feedback">
                                用户名只能包含大小写字母、数字和下划线，多个用户名用分号隔开并紧跟在分号后。
                              </div>
                            </div>
                          </div>

                          <div class="col-md-12">
                            <label for="txnOperationM" class="form-label"
                              >事务操作:</label
                            >
                            <div class="input-group has-validation">
                              <span
                                class="input-group-text"
                                id="inputGroupPrependM">Op-</span
                              >
                              <input
                                type="text"
                                class="form-control"
                                id="formTxnOperationM"
                                aria-describedby="inputGroupPrepend"
                                required
                                pattern="[A-Za-z0-9_]+(;[A-Za-z0-9_]+)*"
                              />
                              <div class="valid-feedback">格式正确。</div>
                              <div class="invalid-feedback">
                                合法操作由大小写字母、数字和下划线,多个操作用分号隔开并紧跟在分号后。
                              </div>
                            </div>
                          </div>

                          <div class="col-md-6">
                            <label for="formTxnAmountMinM" class="form-label"
                              >事务数值下限:</label
                            >
                            <div class="input-group has-validation">
                              <span
                                class="input-group-text"
                                id="inputGroupPrependM">$</span
                              >
                              <input
                                type="text"
                                class="form-control"
                                id="formTxnAmountMinM"
                                aria-describedby="inputGroupPrepend"
                                required
                                pattern="^([1-9][0-9]*|0)(\.[0-9]+)?$"
                              />
                              <div class="valid-feedback">格式正确。</div>
                              <div class="invalid-feedback">
                                请输入合法的数字。
                              </div>
                            </div>
                          </div>
                          <div class="col-md-6">
                            <label for="formTxnAmountMaxM" class="form-label"
                              >事务数值上限:</label
                            >
                            <div class="input-group has-validation">
                              <span
                                class="input-group-text"
                                id="inputGroupPrependM">$</span
                              >
                              <input
                                type="text"
                                class="form-control"
                                id="formTxnAmountMaxM"
                                aria-describedby="inputGroupPrepend"
                                required
                                pattern="^([1-9][0-9]*|0)(\.[0-9]+)?$"
                              />
                              <div class="valid-feedback">格式正确。</div>
                              <div class="invalid-feedback">
                                请输入合法的数字。
                              </div>
                            </div>
                          </div>
                          <div class="col-md-12">
                            <label for="formTxnDataM" class="form-label"
                              >事务数据:</label
                            >
                            <div class="input-group has-validation">
                              <textarea
                                class="form-control"
                                id="formTxnDataM"
                                aria-describedby="inputGroupPrepend"
                                rows="5"></textarea>
                              <div class="valid-feedback">格式正确。</div>
                              <div class="invalid-feedback">请输入内容。</div>
                            </div>
                          </div>

                          <div class="col-md-12">
                            <label for="formTxnInfoM" class="form-label"
                              >事务附加信息:</label
                            >
                            <div class="input-group has-validation">
                              <textarea
                                class="form-control"
                                id="formTxnInfoM"
                                aria-describedby="inputGroupPrepend"
                                rows="5"></textarea>
                              <div class="valid-feedback">格式正确。</div>
                              <div class="invalid-feedback">请输入内容。</div>
                            </div>
                          </div>
                          <hr />
                          <div class="col-md-12">
                            <label for="formNodeM" class="form-label"
                              >发送节点:</label
                            >
                            <select class="form-select" id="formNodeM" required>
                            </select>
                            <div class="valid-feedback">选择合法。</div>
                            <div class="invalid-feedback">
                              必须选择一种节点。
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="card-footer">
                        <button
                          type="reset"
                          class="btn btn-secondary col-md-2"
                          style="background-color: gray;"
                        >
                          重置
                        </button>
                        <button
                          type="submit"
                          class="btn btn-warning col-md-2 float-end"
                          id="submitFormM"
                        >
                          提交
                        </button>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
      <script is:inline>
        const formNodeM = document.getElementById("formNodeM");
        function fetchNodeList() {
          fetch("http://localhost:8000/allNode")
            .then((response) => response.json())
            .then((data) => {
              formNodeM.innerHTML = "";
              formNodeM.options[0] = new Option("广播", "Broadcast");
              data.forEach(function (node, index) {
                formNodeM.options[index + 1] = new Option(
                  node.nodeId + "." + node.nodeName,
                  node.nodeId,
                );
              });
            })
            .catch((error) => console.error("请求出错: " + error));
        }
        // 为了防止用户在选择时出现渲染，所以每次网页加载只请求一次...
        fetchNodeList();



        const timestampInputM = document.getElementById("formTimestampM");
        function updateTimestamp() {
          const currentTimestampM = Math.floor(Date.now() / 1000); // 获取当前时间的 UNIX 时间戳（秒）
          timestampInputM.value = currentTimestampM; // 更新时间戳字段
        }
        updateTimestamp();
        setInterval(updateTimestamp, 1000);

        const formM = document.getElementById("formM");
        formM.addEventListener("submit", function (event) {
          if (!formM.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
          }
          formM.classList.add("was-validated");
        });
        document
          .getElementById("submitFormM")
          .addEventListener("click", function () {
            const spamTxnNum = document.getElementById("formTxnNumM").value;
            const spamTxnFrom = document.getElementById("formTxnFromM").value;
            const spamTxnTo = document.getElementById("formTxnToM").value;
            const spamTxnOperation =
              document.getElementById("formTxnOperationM").value;
            const spamTxnAmountMin =
              document.getElementById("formTxnAmountMinM").value;
            const spamTxnAmountMax =
              document.getElementById("formTxnAmountMaxM").value;
            const spamTxnData = document.getElementById("formTxnDataM").value;
            const spamTxnInfo = document.getElementById("formTxnInfoM").value;
            const selectedNode = formNodeM.value;
            console.log(spamTxnAmountMax)
            const formData = new FormData();
            formData.append("spamTxnNum", spamTxnNum);
            formData.append("spamTxnFrom", spamTxnFrom);
            formData.append("spamTxnTo", spamTxnTo);
            formData.append("spamTxnOperation", spamTxnOperation);
            formData.append("spamTxnValueMin", spamTxnAmountMin);
            formData.append("spamTxnValueMax", spamTxnAmountMax);
            formData.append("spamTxnData", spamTxnData);
            formData.append("spamTxnInfo", spamTxnInfo);
            formData.append("spamTxnNode", selectedNode);
            

            fetch("http://localhost:8000/submitSpamTxn", {
              method: "POST",
              body: formData,
            })
              .then((response) => {
                if (response.ok) {
                  console.log("表单提交成功！");
                } else {
                  console.error("表单提交失败");
                }
              })
              .catch((error) => console.error("请求出错: " + error));
          });
      </script>
    </div>
    <Footer />
    <Scripts path={path} />
  </body>
</html>
